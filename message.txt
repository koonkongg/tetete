--updatefix
local version = "16.0.0-1xx"

---// Loading Section \\---
repeat  task.wait() until game:IsLoaded()
if game.PlaceId == 8304191830 then
    repeat task.wait() until game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name)
    repeat task.wait() until game.Players.LocalPlayer.PlayerGui:FindFirstChild("collection"):FindFirstChild("grid"):FindFirstChild("List"):FindFirstChild("Outer"):FindFirstChild("UnitFrames")
    repeat task.wait() until game.ReplicatedStorage.packages:FindFirstChild("assets")
    repeat task.wait() until game.ReplicatedStorage.packages:FindFirstChild("StarterGui")
else
    repeat task.wait() until game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name)
    game:GetService("ReplicatedStorage").endpoints.client_to_server.vote_start:InvokeServer()
    repeat task.wait() until game:GetService("Workspace")["_waves_started"].Value == true
end

------------------------------
local a = 'V2_Anime_Adventures' -- 
local b = game:GetService('Players').LocalPlayer.Name .. '_AnimeAdventures.json' 
Settings = {}
function saveSettings()
    local HttpService = game:GetService('HttpService')
    if not isfolder(a) then
        makefolder(a)
    end
    writefile(a .. '/' .. b, HttpService:JSONEncode(Settings))
    Settings = ReadSetting()
    warn("Settings Saved!")
end
function ReadSetting()
    local s, e = pcall(function()
        local HttpService = game:GetService('HttpService')
        if not isfolder(a) then
            makefolder(a)
        end
        return HttpService:JSONDecode(readfile(a .. '/' .. b))
    end)
    if s then
        return e
    else
        saveSettings()
        return ReadSetting()
    end
end
Settings = ReadSetting()

    -- Start of Get Level Data of Map [Added by HOLYSHz]
    function GLD()
        local list = {}
        for i,v in pairs(game.Workspace._MAP_CONFIG:WaitForChild("GetLevelData"):InvokeServer()) do
            list[i] = v
        end
        return list
    end

    if game.PlaceId ~= 8304191830 then
        GLD()
    end
        -- End of Get Level Data of Map
------------------------------
local HttpService = game:GetService("HttpService")
local Workspace = game:GetService("Workspace") 
local plr = game:GetService("Players").LocalPlayer
local RunService = game:GetService("RunService")
local mouse = game.Players.LocalPlayer:GetMouse()
local UserInputService = game:GetService("UserInputService")
------------------------------
------------item drop result
local v5 = require(game.ReplicatedStorage.src.Loader)
local ItemInventoryServiceClient = v5.load_client_service(script, "ItemInventoryServiceClient")
function get_inventory_items_unique_items()
	return ItemInventoryServiceClient["session"]['inventory']['inventory_profile_data']['unique_items']
end
function get_inventory_items()
	return ItemInventoryServiceClient["session"]["inventory"]['inventory_profile_data']['normal_items']
end
function get_Units_Owner()
	return ItemInventoryServiceClient["session"]["collection"]["collection_profile_data"]['owned_units']
end
local Count_Portal_list = 0
local Table_All_Items_Old_data = {}
local Table_All_Items_New_data = {}
for v2, v3 in pairs(game:GetService("ReplicatedStorage").src.Data.Items:GetDescendants()) do
	if v3:IsA("ModuleScript") then
		for v4, v5 in pairs(require(v3)) do
		    Table_All_Items_Old_data[v4] = {}
			Table_All_Items_Old_data[v4]['Name'] = v5['name']
		    Table_All_Items_Old_data[v4]['Count'] = 0
			Table_All_Items_New_data[v4] = {}
			Table_All_Items_New_data[v4]['Name'] = v5['name']
			Table_All_Items_New_data[v4]['Count'] = 0
		end
	end
end
local Data_Units_All_Games = require(game:GetService("ReplicatedStorage").src.Data.Units)
for i,v in pairs(Data_Units_All_Games) do
    if v.rarity then
        Table_All_Items_Old_data[i] = {}
        Table_All_Items_Old_data[i]['Name'] = v['name']
        Table_All_Items_Old_data[i]['Count'] = 0
        Table_All_Items_Old_data[i]['Count Shiny'] = 0
        Table_All_Items_New_data[i] = {}
        Table_All_Items_New_data[i]['Name'] = v['name']
        Table_All_Items_New_data[i]['Count'] = 0
        Table_All_Items_New_data[i]['Count Shiny'] = 0
    end
end
for i,v in pairs(get_inventory_items()) do
	Table_All_Items_Old_data[i]['Count'] = v
end
for i,v in pairs(get_inventory_items_unique_items()) do
    if string.find(v['item_id'],"portal") or string.find(v['item_id'],"disc") then
        Count_Portal_list = Count_Portal_list + 1
        Table_All_Items_Old_data[v['item_id']]['Count'] = Table_All_Items_Old_data[v['item_id']]['Count'] + 1
    end
end
for i,v in pairs(get_Units_Owner()) do
    Table_All_Items_Old_data[v["unit_id"]]['Count'] = Table_All_Items_Old_data[v["unit_id"]]['Count'] + 1
    if v.shiny then
        Table_All_Items_Old_data[v["unit_id"]]['Count'] = Table_All_Items_Old_data[v["unit_id"]]['Count'] - 1
        Table_All_Items_Old_data[v["unit_id"]]['Count Shiny'] = Table_All_Items_Old_data[v["unit_id"]]['Count Shiny'] + 1
    end
end
if game.Players.LocalPlayer._stats:FindFirstChild("_resourceCandies") then
    CandiesOld = game.Players.LocalPlayer._stats._resourceCandies.Value
end
----------------Map & ID Map
local function GetCurrentLevelId()
    if game.Workspace._MAP_CONFIG then
        return game:GetService("Workspace")._MAP_CONFIG.GetLevelData:InvokeServer()["id"]
    end
end
local function GetCurrentLevelName()
    if game.Workspace._MAP_CONFIG then
        return game:GetService("Workspace")._MAP_CONFIG.GetLevelData:InvokeServer()["name"]
    end
end
function comma_value(p1)
	local value = p1;
	while true do
		local value2, value3 = string.gsub(value, "^(-?%d+)(%d%d%d)", "%1,%2");
		value = value2;
		if value3 ~= 0 then else
			break;
		end;
	end;
	return value;
end;
----------------endMap & ID Map
getgenv().item = "-"
plr.PlayerGui:FindFirstChild("HatchInfo"):FindFirstChild("holder"):FindFirstChild("info1"):FindFirstChild("UnitName").Text = getgenv().item
function webhook()
    if Settings.WebhookEnabled then
        local url = Settings.WebhookUrl
        print("webhook?")
        if url == "" then
            warn("Webhook Url is empty!")
            return
        end 

        local Time = os.date('!*t', OSTime);
        local thumbnails_avatar = HttpService:JSONDecode(game:HttpGet("https://thumbnails.roblox.com/v1/users/avatar-headshot?userIds=" .. game:GetService("Players").LocalPlayer.UserId .. "&size=150x150&format=Png&isCircular=true", true))
        local exec = tostring(identifyexecutor())
        userlevel = plr.PlayerGui:FindFirstChild("spawn_units"):FindFirstChild("Lives"):FindFirstChild("Main"):FindFirstChild("Desc"):FindFirstChild("Level").Text
        totalgems = plr.PlayerGui:FindFirstChild("spawn_units"):FindFirstChild("Lives"):FindFirstChild("Frame"):FindFirstChild("Resource"):FindFirstChild("Gem"):FindFirstChild("Level").Text

        ResultHolder = plr.PlayerGui:FindFirstChild("ResultsUI"):FindFirstChild("Holder")
        if game.PlaceId ~= 8304191830 then
        levelname = game:GetService("Workspace"):FindFirstChild("_MAP_CONFIG"):FindFirstChild("GetLevelData"):InvokeServer()["name"]
        result = ResultHolder.Title.Text else levelname, result = "nil","nil" end
        if result == "VICTORY" then result = "VICTORY" end
        if result == "DEFEAT" then result = "DEFEAT" end
        _map = game:GetService("Workspace")["_BASES"].player.base["fake_unit"]:WaitForChild("HumanoidRootPart")

        ---------------------------------
        --portaldiff test
        for i,v in pairs(get_inventory_items_unique_items()) do
            if string.find(v['item_id'],"portal") then
                --if v['item_id'] == Settings.SelectedSellPortals then
                --if v["_unique_item_data"]["_unique_portal_data"]["portal_depth"] == Settings.SelectedSellTier then

                    PortalsDiff = v["_unique_item_data"]["_unique_portal_data"]["difficulty_scale"]

                --end
            end
        end
        ---------------------------------
        GetLevelData = game.workspace._MAP_CONFIG:WaitForChild("GetLevelData"):InvokeServer()
        name = GetLevelData.id or GetLevelData.world or GetLevelData.map
        world = GetLevelData.name
        --New Mapname
        local Loader = require(game.ReplicatedStorage.src.Loader)
        local Maps = Loader.load_data(script, "Maps")
        local v100 = Maps[Loader.LevelData.map]
        MapsNameTEST = v100.name or GetLevelData.name
        --Difficulty
        MapDiff2 = game:GetService("Players").LocalPlayer.PlayerGui.ResultsUI.Holder.Difficulty.Text
        MapDiff3 = MapDiff2
        --if GetLevelData.name == "Summer Hunt" then MapDiff3 = " [ Default ] Is a Portal " end
        if poratltierS ~= nil or poratltierS ~= " Not have Tier " then MapDiff3 = " Hard " end
        if poratltierS == nil or poratltierS == " Not have Tier " then MapDiff3 = MapDiff2 end
        if poratltierS == nil or poratltierS == " Not have Tier " then MapDiff3 = MapDiff end
        if poratChallengeS ~= nil or poratChallengeS ~= " Not have Challenge " then MapDiff3 = " Hard " end
        if poratChallengeS ~= " Not have Challenge " then MapDiff3 = " Hard " end
        -------------------------------

        cwaves = game:GetService("Players").LocalPlayer.PlayerGui.ResultsUI.Holder.Middle.WavesCompleted.Text
        ctime = game:GetService("Players").LocalPlayer.PlayerGui.ResultsUI.Holder.Middle.Timer.Text
        btp = plr.PlayerGui:FindFirstChild("BattlePass"):FindFirstChild("Main"):FindFirstChild("Level"):FindFirstChild("V").Text
        btp2 = game:GetService("Players").LocalPlayer.PlayerGui.BattlePass.Main.Level.Title.Text
        btpAlllv = game:GetService("Players").LocalPlayer.PlayerGui.BattlePass.Main.Main.Rewards.Frame.Pages.Home.Amount.Text
        btplv = game:GetService("Players").LocalPlayer.PlayerGui.BattlePass.Main.Level.V.Text
        waves = cwaves:split(": ")
        if waves ~= nil and waves[2] == "999" then waves[2] = "Use [Auto Leave at Wave] or [Test Webhook]" end	
        ttime = ctime:split(": ")
        if waves ~= nil and ttime[2] == "22:55" then ttime[2] = "Use [Auto Leave at Wave] or [Test Webhook]" end	
        gold = ResultHolder:FindFirstChild("LevelRewards"):FindFirstChild("ScrollingFrame"):FindFirstChild("GoldReward"):FindFirstChild("Main"):FindFirstChild("Amount").Text
        if gold == "+99999" then gold = "+0" end	    
        gems = ResultHolder:FindFirstChild("LevelRewards"):FindFirstChild("ScrollingFrame"):FindFirstChild("GemReward"):FindFirstChild("Main"):FindFirstChild("Amount").Text
        if gems == "+99999" then gems = "+0" end	 

        if game.Players.LocalPlayer._stats:FindFirstChild("_resourceCandies") then
            Candies = game.Players.LocalPlayer._stats._resourceCandies.Value
        end

        xpx = ResultHolder:FindFirstChild("LevelRewards"):FindFirstChild("ScrollingFrame"):FindFirstChild("XPReward"):FindFirstChild("Main"):FindFirstChild("Amount").Text
        xp = xpx:split(" ")
        if xp[1] == "+99999" then xp[1] = "+0" end
        trophy = ResultHolder:FindFirstChild("LevelRewards"):FindFirstChild("ScrollingFrame"):FindFirstChild("TrophyReward"):FindFirstChild("Main"):FindFirstChild("Amount").Text
        if trophy == "+99999" then trophy = "+0" end	 

        totaltime =  ResultHolder:FindFirstChild("Middle"):FindFirstChild("Timer").Text
        totalwaves = ResultHolder:FindFirstChild("Middle"):FindFirstChild("WavesCompleted").Text

        ------------------------------------------------
        --Webhook Tier Challenge

        local v5 = require(game.ReplicatedStorage.src.Loader)
        local poratltierS = v5.LevelData._portal_depth
        if poratltierS == nil then poratltierS = " Not have Tier " end

        local v5 = require(game.ReplicatedStorage.src.Loader)
        local poratChallengeS = v5.LevelData._challenge
        if poratChallengeS == nil then poratChallengeS = " Not have Challenge " end
        if poratChallengeS == "double_cost" then poratChallengeS = "High Cost" end
        if poratChallengeS == "short_range" then poratChallengeS = "Short Range" end
        if poratChallengeS == "fast_enemies" then poratChallengeS = "Fast Enemies" end
        if poratChallengeS == "regen_enemies" then poratChallengeS = "Regen Enemies" end
        if poratChallengeS == "tank_enemies" then poratChallengeS = "Tank Enemies" end
        if poratChallengeS == "shield_enemies" then poratChallengeS = "Shield Enemies" end
        if poratChallengeS == "triple_cost" then poratChallengeS = "Triple Cost" end
        if poratChallengeS == "hyper_regen_enemies" then poratChallengeS = "Hyper-Regen Enemies" end
        if poratChallengeS == "hyper_shield_enemies" then poratChallengeS = "Steel-Plated Enemies" end
        if poratChallengeS == "godspeed_enemies" then poratChallengeS = "Godspeed Enemies" end
        if poratChallengeS == "flying_enemies" then poratChallengeS = "Flying Enemies" end
        if poratChallengeS == "mini_range" then poratChallengeS = "Mini-Range" end


        --------------------------------------------------------------------

        local TextDropLabel = ""
        local CountAmount = 1
        for i,v in pairs(get_inventory_items()) do
        Table_All_Items_New_data[i]['Count'] = v
        end
        for i,v in pairs(get_inventory_items_unique_items()) do
            if string.find(v['item_id'],"portal") or string.find(v['item_id'],"disc") then
                Table_All_Items_New_data[v['item_id']]['Count'] = Table_All_Items_New_data[v['item_id']]['Count'] + 1
            end
        end
        for i,v in pairs(get_Units_Owner()) do
            Table_All_Items_New_data[v["unit_id"]]['Count'] = Table_All_Items_New_data[v["unit_id"]]['Count'] + 1
            if v.shiny then
                Table_All_Items_New_data[v["unit_id"]]['Count'] = Table_All_Items_New_data[v["unit_id"]]['Count'] - 1
            Table_All_Items_New_data[v["unit_id"]]['Count Shiny'] = Table_All_Items_New_data[v["unit_id"]]['Count Shiny'] + 1
            end
        end
        for i,v in pairs(Table_All_Items_New_data) do
            if v['Count'] > 0 and (v['Count'] - Table_All_Items_Old_data[i]['Count']) > 0 then
                if v['Count Shiny'] and v['Count'] then
                    if v['Count'] > 0 or v['Count Shiny'] > 0 then
                        if v['Count'] > 0 and (v['Count'] - Table_All_Items_Old_data[i]['Count']) > 0 then
                            TextDropLabel = TextDropLabel .. tostring(CountAmount) .. ". " .. tostring(v['Name']) .. " : x" .. tostring(v['Count'] - Table_All_Items_Old_data[i]['Count'])
                            if v['Count Shiny'] > 0 and (v['Count Shiny'] - Table_All_Items_Old_data[i]['Count Shiny']) > 0 then
                                TextDropLabel = TextDropLabel .. " | " .. tostring(v['Name']) .. " (Shiny) : x" .. tostring(v['Count Shiny'] - Table_All_Items_Old_data[i]['Count Shiny']) .. "\n"
                                CountAmount = CountAmount + 1
                            else
                                TextDropLabel = TextDropLabel .. "\n"
                                CountAmount = CountAmount + 1
                            end
                        end
                    end
                end
            elseif v['Count Shiny'] and v['Count Shiny'] > 0 and (v['Count Shiny'] - Table_All_Items_Old_data[i]['Count Shiny']) > 0 then
                TextDropLabel = TextDropLabel .. tostring(CountAmount) .. ". " .. tostring(v['Name']) .. " (Shiny) : x" .. tostring(v['Count Shiny'] - Table_All_Items_Old_data[i]['Count Shiny']) .. "\n"
                CountAmount = CountAmount + 1
            end
        end
        for i,v in pairs(Table_All_Items_New_data) do
            if v['Count'] > 0 and (v['Count'] - Table_All_Items_Old_data[i]['Count']) > 0 then
            --if v['Count'] > 0 and (v['Count'] == Table_All_Items_Old_data[i]['Count']) > 0 then
                if v['Count Shiny'] and v['Count'] then
                elseif string.find(i,"portal") or string.find(i,"disc") then
                    Count_Portal_list = Count_Portal_list + 1
                if string.gsub(i, "%D", "") == "" then
                        TextDropLabel = TextDropLabel .. tostring(CountAmount) .. ". " .. tostring(v['Name']) .. " : x" .. tostring(v['Count'] - Table_All_Items_Old_data[i]['Count']) .. "\n"
                else
                        TextDropLabel = TextDropLabel .. tostring(CountAmount) .. ". " .. tostring(v['Name']) .. " Tier " .. tostring(string.gsub(i, "%D", "")) .. " : x" .. tostring(v['Count'] - Table_All_Items_Old_data[i]['Count']) .. "\n"
                    end
                    CountAmount = CountAmount + 1
                else
                    TextDropLabel = TextDropLabel .. tostring(CountAmount) .. ". " .. tostring(v['Name']) .. " : x" .. tostring(v['Count'] - Table_All_Items_Old_data[i]['Count']) .. "\n"
                    CountAmount = CountAmount + 1
                end
            end
        end
    --end

        if TextDropLabel == "" then
            TextDropLabel = "Not Have Items Drops"
        end

        local data = {
            ["content"] = "",
            ["username"] = "Anime Adventures By Kaow",
            ["avatar_url"] = "https://tr.rbxcdn.com/b9d6508b4bd3628bdeb6ba9825afef91/150/150/Image/Png",
            ["embeds"] = {
                {
                    ["author"] = {
                        ["name"] = "Anime Adventures | ✔️",
                        ["icon_url"] = "https://cdn.discordapp.com/emojis/997123585476927558.webp?size=96&quality=lossless"
                    },
                    ["thumbnail"] = {
                        ['url'] = thumbnails_avatar.data[1].imageUrl,
                    },
                    ["description"] = " Player Name : 🐱 ||**"..game:GetService("Players").LocalPlayer.Name.."**|| 🐱\nExecutors : 🎮 "..exec.." 🎮 ",
                    ["color"] = 110335,
                    ["timestamp"] = string.format('%d-%d-%dT%02d:%02d:%02dZ', Time.year, Time.month, Time.day, Time.hour, Time.min, Time.sec),
                    ['footer'] = {
                        ['text'] = "// Made by Kaow", 
                        ['icon_url'] = "https://cdn.discordapp.com/attachments/993903659635191858/1089903698848796702/2bcdd49e8cc8448f.jpg"
                    },
                    ["fields"] = {
                        {
                            ["name"] ="Level ✨ & Gems 💎 & Gold 💰 & Portals 🌀",
                            ["value"] = "```ini\n"
                                        ..tostring(game.Players.LocalPlayer.PlayerGui.spawn_units.Lives.Main.Desc.Level.Text)..  " ✨\nGold : "
                                        ..tostring(comma_value(game.Players.LocalPlayer._stats.gold_amount.Value)).. " 💰\nGems : "
                                        ..tostring(comma_value(game.Players.LocalPlayer._stats.gem_amount.Value)).. " 💎\nTrophies : "
                                        ..tostring(comma_value(game.Players.LocalPlayer._stats.trophies.Value)).. " 🏆\nPortal : "
                                        ..tostring(Count_Portal_list) .." 🌀\nCandies : "
                                        ..tostring(comma_value(game.Players.LocalPlayer._stats._resourceCandies.Value)).. " 🎃```",
                        },
                        {
                            ["name"] ="Results :",
                            ["value"] = "```ini\nWorld : "..world.. " 🌏\nMap Name : "..tostring(MapsNameTEST).. " 🗺️\nMap Id : "..name.. " 🗺️\nDifficulty : "..tostring(MapDiff3).. " 🎚️\nResults : "..result.. " ⚔️\nWave End : " ..tostring(waves[2]).." 🌊\nTime : " ..tostring(ttime[2]).." ⌛```",
                            ["inline"] = true
                        },
                        {
                            ["name"] ="Rewards :",
                            ["value"] = "```ini\n"  
                                            .. comma_value(gold) .." Gold 💰\n"
                                            .. comma_value(gems) .." Gems 💎\n+"
                                            .. comma_value(Candies - CandiesOld) .." Candies 🎃\n"
                                            .. comma_value(xp[1]) .." XP 🧪\n"
                                            .. trophy .." Trophy 🏆```",
                        },
                        {
                            ["name"] ="Items Drop :",
                            ["value"] = "```ini\n" .. TextDropLabel .. "```",
                            ["inline"] = false 
                        }
                    }
                }
            }
        }

        local porn = game:GetService("HttpService"):JSONEncode(data)
        local headers = {["content-type"] = "application/json"}
        local request = http_request or request or HttpPost or syn.request or http.request
        local sex = {Url = url, Body = porn, Method = "POST", Headers = headers}
        warn("Sending webhook notification...")
        request(sex)
    end
end

------------------------------\
--[[if game.Players.LocalPlayer.PlayerGui:FindFirstChild("FinityUI") then
    game.Players.LocalPlayer.PlayerGui["FinityUI"]:Destroy()
end]]

if game.CoreGui:FindFirstChild("FinityUI") then
    game.CoreGui["FinityUI"]:Destroy()
end

local dir = "Anime_Adventures/"..game.Players.LocalPlayer.Name
local Uilib = loadstring(game:HttpGet("https://raw.githubusercontent.com/ArponAG/Scripts/main/finitylibTEST"))()
--local Uilib = loadstring(game:HttpGet("https://raw.githubusercontent.com/ArponAG/Scripts/main/finitylib"))()
local exec = tostring(identifyexecutor())
local Window = Uilib.new(true, "[Arpon_V2] Anime Adventures UPD "..version.." - "..exec)
Window.ChangeToggleKey(Enum.KeyCode.P)
local LG = Window:Category("🛠️ Misc [BETA]")
local LowCPU2 = LG:Sector("Low CPU Mode")
local WebhookSec = ETC:Sector("🌐 Discord Webhook 🌐")


----------------------------------------------
---------------- Units Selection -------------
----------------------------------------------
if Settings.SelectedUnits == nil then
    Settings.SelectedUnits = {
        U1 = "nil",
        U2 = "nil",
        U3 = "nil",
        U4 = "nil",
        U5 = "nil",
        U6 = "nil"
    }
    saveSettings()
end
local function UnitSec()
    --#region Select Units Tab
    local Units = {}

    function Check()
        local DataUnits = require(game:GetService("ReplicatedStorage").src.Data.Units)
        for i, v in pairs(getgenv().profile_data.equipped_units) do
            if DataUnits[v.unit_id] and v.equipped_slot then
                Settings.SelectedUnits["U"..tostring(v.equipped_slot)] = tostring(DataUnits[v.unit_id].id) .. " #" .. tostring(v.uuid)
                print("U"..tostring(v.equipped_slot).." "..tostring(DataUnits[v.unit_id].id).." #" .. tostring(v.uuid))
                local StarterGui = game:GetService("StarterGui")
                    StarterGui:SetCore("SendNotification", {
                        Title = "Equip Unit",
                        Text = "U"..tostring(v.equipped_slot).." : "..tostring(DataUnits[v.unit_id].name),
                        Duration = 10
                    })
            end
        end
        saveSettings()
    end
    function LoadUnits()
        local DataUnits = require(game:GetService("ReplicatedStorage").src.Data.Units)
        table.clear(Units)
        for i, v in pairs(getgenv().profile_data.equipped_units) do
            if DataUnits[v.unit_id] then
                table.insert(Units, DataUnits[v.unit_id].name .. " #" .. tostring(v.uuid))
            end
        end
        Check()
    end
    function GetUnits()
        if Settings.SelectedUnits == nil then
            Settings.SelectedUnits = {
                U1 = "nil",
                U2 = "nil",
                U3 = "nil",
                U4 = "nil",
                U5 = "nil",
                U6 = "nil"
            }
            saveSettings()
        end
        getgenv().profile_data = { equipped_units = {} }; repeat
            do
                for i, v in pairs(getgc(true)) do
                    if type(v) == "table" and rawget(v, "xp") then wait()
                        table.insert(getgenv().profile_data.equipped_units, v)
                    end
                end
            end
        until #getgenv().profile_data.equipped_units > 0
        LoadUnits()
    end
    GetUnits()
    SelectUnits:Cheat("Button", "🧙 Select Units", function() --Selects Currently Equipped Units!
        Settings.SelectedUnits = {
            U1 = "nil",
            U2 = "nil",
            U3 = "nil",
            U4 = "nil",
            U5 = "nil",
            U6 = "nil"
        }
        saveSettings()
        GetUnits()
    end)
    function switchteam(string)
        local args = { [1] = string }
        game:GetService("ReplicatedStorage").endpoints.client_to_server.switch_team_loadout:InvokeServer(unpack(args))
    end
    local a = SelectUnits:Cheat("Dropdown", "🧙 Select Team",function(preset)
        Settings.SelectedPreset = preset
        print(preset)
        saveSettings()
    end, { 
        options = { "Team 1", "Team 2", "Team 3", "Team 4","Team 5" }, 
        default = Settings.SelectedPreset
    })
    SelectUnits:Cheat("Button", "⌛ Switch Team", function() --loads preset
        preset = Settings.SelectedPreset
        if preset == "Team 1" then
            switchteam("1")
        elseif preset == "Team 2" then
            switchteam("2")
        elseif preset == "Team 3" then
            switchteam("3")
        elseif preset == "Team 4" then
            switchteam("4")
        elseif preset == "Team 5" then
            switchteam("5")
        end
        print(preset)
        GetUnits()
    end)
end

SelectUnits:Cheat("Checkbox","🦸 Auto Save Unit ", function(bool)
    warn("Auto Save Unit set to " .. tostring(bool))
    Settings.AutoSaveUnit = bool
    saveSettings()
end,{enabled = Settings.AutoSaveUnit })

-- End of Unit Section Function

-- Start of Auto Save Unit Function
function AutoSaveUnit()
    if Settings.AutoSaveUnit then
        local function saveUnit()
        -- Generate Selected Unit Parameters
        if Settings.SelectedUnits == nil then
            Settings.SelectedUnits = {}
            for i = 1, 6, 1 do
                Settings.SelectedUnits["UP" .. i] = "nil"
            end
        else
            -- Reset Selected Unit List to nil
            for i = 1, 6, 1 do
                Settings.SelectedUnits["UP" .. i] = "nil"
            end
        end

        -- Transfer Equipped Units to Selected Unit List and Save to JSON
        for i, v in pairs(getgenv().profile_data.equipped_units) do
            if v.equipped_slot then
                Settings.SelectedUnits["UP" .. tostring(v.equipped_slot)] = tostring(v.unit_id) .. " #" .. tostring(v.uuid)
                print("UP" .. tostring(v.equipped_slot) .. " " .. tostring(v.unit_id) .. " #" .. tostring(v.uuid))
            end
        end
        saveSettings()
    end

    local function fetchUnit()
        getgenv().profile_data = { 
            equipped_units = {}
        }
        table.clear(getgenv().profile_data.equipped_units)

        -- Fetch Unit List
        for i, v in pairs(getgc(true)) do
            if type(v) == "table" and rawget(v, "xp") then
                wait()
                table.insert(getgenv().profile_data.equipped_units, v)
            end
        end

        -- Generate Selected Unit Parameters
        if Settings.SelectedUnits == nil then
            Settings.SelectedUnits = {}
            for i = 1, 6, 1 do
                Settings.SelectedUnits["UP" .. i] = "nil"
            end
        end

        -- Generate Compare List Parameters
        EquippedList = {}
        table.clear(EquippedList)

        for i = 1, 6, 1 do
            EquippedList["UP" .. i] = "nil"
        end

        -- Filter Fetched Unit to List Equipped Units Only
        for i, v in pairs(getgenv().profile_data.equipped_units) do
            if v.equipped_slot then
                EquippedList["UP" .. v.equipped_slot] = tostring(v.unit_id) .. " #" .. tostring(v.uuid)
            end
        end

        -- If Equipped Slot in Empty, Put "nil"
        for i = 1, 6, 1 do
            if EquippedList["UP"..i] == nil then
                EquippedList["UP"..i] = "nil"
            end
        end

        -- Compared Current List to Saved JSON List if not the same then call AutoSave Function
        for i = 1, 6, 1 do
            if EquippedList["UP"..i] ~= Settings.SelectedUnits["UP"..i] then
                saveUnit()
            end
        end
    end

    fetchUnit()

    end
end

-- End of Auto Save Unit Function
----------------------------------------------
------------------ World Section -------------updatefix
----------------------------------------------
local function WorldSec()
    SelectWorld:Cheat("Dropdown", "🔱 Select Category",function(value)
        print(value)
        Settings.WorldCategory = value
        getgenv().updateworld()
        getgenv().updatelevel()
        getgenv().updatedifficulty()
        saveSettings()
    end, {
        options = {
            "Story Worlds",
            "Legend Stages",
            "Raid Worlds",
            "Portals",
            "Dungeon",
            "Secret Portals"
        },
        default = Settings.WorldCategory
    })
    local selectworld = SelectWorld:Cheat("Dropdown", "🌏 Select World",function(value)
        print(value)
        Settings.SelectedWorld = value
        getgenv().updatelevel()
        getgenv().updatedifficulty()
        saveSettings()
    end, {options = { }, default = Settings.SelectedWorld })
--fixmap
    getgenv().updateworld = function()
        selectworld:ClearDrop() local storylist;
        if Settings.WorldCategory == "Story Worlds" then
            storylist = {"Planet Namak", "Shiganshinu District", "Snowy Town","Hidden Sand Village", "Marine's Ford",
            "Ghoul City", "Hollow World", "Ant Kingdom", "Magic Town", "Cursed Academy","Clover Kingdom","Cape Canaveral", "Alien Spaceship","Fabled Kingdom",
            "Hero City","Puppet Island","Virtual Dungeon","Windhym","Undead Tomb"}
        elseif Settings.WorldCategory == "Legend Stages" then
            storylist = {"Clover Kingdom (Elf Invasion)", "Hollow Invasion","Cape Canaveral (Legend)", "Fabled Kingdom (Legend)", "Hero City (Midnight)", "Virtual Dungeon (Bosses)",
            "Undead Tomb (Legend)"}
        elseif Settings.WorldCategory == "Raid Worlds" then
            storylist = {"Storm Hideout","West City", "Infinity Train", "Shiganshinu District - Raid","Hiddel Sand Village - Raid", "Freezo's Invasion", "Entertainment District", 
            "Hero City (Hero Slayer)", "Marine's Ford (Buddha)"}
        elseif Settings.WorldCategory == "Portals" then
            storylist = {"Alien Portals","Zeldris Portals","Demon Portals","Dressrosa Portals","The Eclipse","Summer Events"}
        elseif Settings.WorldCategory == "Dungeon" then
            storylist = {"Cursed Womb","Crused Parade","Anniversary Island"}    
        elseif Settings.WorldCategory == "Secret Portals" then
            storylist = {"Dressrosa Secret Portals","The Eclipse Secret","Summer Secret"} 
        end

        for i = 1, #storylist do
            selectworld:AddOption(storylist[i])
        end
    end
    local selectlevel = SelectWorld:Cheat("Dropdown", "🎚️ Select Level",function(value)
        print(value)
        Settings.SelectedLevel = value
        getgenv().updatedifficulty()
        saveSettings()
    end, {options = { }, default = Settings.SelectedLevel})
    getgenv().updatelevel = function()
        selectlevel:ClearDrop() local levellist; local level = Settings.SelectedWorld;
        ---///Story Worlds\\\---
        if level == "Planet Namak" then
            levellist = {"namek_infinite", "namek_level_1", "namek_level_2", "namek_level_3", "namek_level_4", "namek_level_5", "namek_level_6"}
        elseif level == "Shiganshinu District" then
            levellist = {"aot_infinite", "aot_level_1", "aot_level_2", "aot_level_3", "aot_level_4","aot_level_5", "aot_level_6"}
        elseif level == "Snowy Town" then
            levellist = {"demonslayer_infinite", "demonslayer_level_1", "demonslayer_level_2", "demonslayer_level_3", "demonslayer_level_4", "demonslayer_level_5","demonslayer_level_6"}
        elseif level == "Hidden Sand Village" then
            levellist =  {"naruto_infinite", "naruto_level_1", "naruto_level_2", "naruto_level_3","naruto_level_4", "naruto_level_5", "naruto_level_6"}
        elseif level == "Marine's Ford" then
            levellist = {"marineford_infinite","marineford_level_1","marineford_level_2","marineford_level_3","marineford_level_4","marineford_level_5","marineford_level_6"}
        elseif level == "Ghoul City" then
            levellist = {"tokyoghoul_infinite","tokyoghoul_level_1","tokyoghoul_level_2","tokyoghoul_level_3","tokyoghoul_level_4","tokyoghoul_level_5","tokyoghoul_level_6"}
        elseif level == "Hollow World" then
            levellist = {"hueco_infinite","hueco_level_1","hueco_level_2","hueco_level_3","hueco_level_4","hueco_level_5","hueco_level_6"}
        elseif level == "Ant Kingdom" then
            levellist = {"hxhant_infinite","hxhant_level_1","hxhant_level_2","hxhant_level_3","hxhant_level_4","hxhant_level_5","hxhant_level_6"}
        elseif level == "Magic Town" then
            levellist =  {"magnolia_infinite","magnolia_level_1","magnolia_level_2","magnolia_level_3","magnolia_level_4","magnolia_level_5","magnolia_level_6"}
        elseif level == "Cursed Academy" then
            levellist = {"jjk_infinite","jjk_level_1","jjk_level_2","jjk_level_3", "jjk_level_4","jjk_level_5","jjk_level_6"}
        elseif level == "Clover Kingdom" then
            levellist = {"clover_infinite","clover_level_1","clover_level_2","clover_level_3","clover_level_4","clover_level_5","clover_level_6"}
        elseif level == "Cape Canaveral" then
            levellist = {"jojo_infinite","jojo_level_1","jojo_level_2","jojo_level_3","jojo_level_4","jojo_level_5","jojo_level_6",}
        elseif level == "Alien Spaceship" then
            levellist = {"opm_infinite","opm_level_1","opm_level_2","opm_level_3","opm_level_4","opm_level_5","opm_level_6",}
        elseif level == "Fabled Kingdom" then
            levellist = {"7ds_infinite","7ds_level_1","7ds_level_2","7ds_level_3","7ds_level_4","7ds_level_5","7ds_level_6",}
        elseif level == "Hero City" then
            levellist = {"mha_infinite","mha_level_1","mha_level_2","mha_level_3","mha_level_4","mha_level_5","mha_level_6",}
        elseif level == "Puppet Island" then
            levellist = {"dressrosa_infinite","dressrosa_level_1","dressrosa_level_2","dressrosa_level_3","dressrosa_level_4","dressrosa_level_5","dressrosa_level_6",}
        elseif level == "Virtual Dungeon" then
            levellist = {"sao_infinite","sao_level_1","sao_level_2","sao_level_3","sao_level_4","sao_level_5","sao_level_6",}
        elseif level == "Windhym" then
            levellist = {"berserk_infinite","berserk_level_1","berserk_level_2","berserk_level_3","berserk_level_4","berserk_level_5","berserk_level_6",}
        elseif level == "Undead Tomb" then
            levellist = {"overlord_infinite","overlord_level_1","overlord_level_2","overlord_level_3","overlord_level_4","overlord_level_5","overlord_level_6",}
        --///Legend Stages\\\---
        elseif level == "Clover Kingdom (Elf Invasion)" then
            levellist = {"clover_legend_1","clover_legend_2","clover_legend_3"}
        elseif level == "Hollow Invasion" then
            levellist = {"bleach_legend_1","bleach_legend_2","bleach_legend_3","bleach_legend_4","bleach_legend_5","bleach_legend_6"}
        elseif level == "Cape Canaveral (Legend)" then
            levellist = {"jojo_legend_1","jojo_legend_2","jojo_legend_3"}
        elseif level == "Fabled Kingdom (Legend)" then
            levellist = {"7ds_legend_1","7ds_legend_2","7ds_legend_3"}
        elseif level == "Hero City (Midnight)" then
            levellist = {"mha_legend_1","mha_legend_2","mha_legend_3","mha_legend_4","mha_legend_5","mha_legend_6"}
        elseif level == "Virtual Dungeon (Bosses)" then
            levellist = {"sao_legend_1","sao_legend_2","sao_legend_3"}
        elseif level == "Undead Tomb (Legend)" then
            levellist = {"overlord_legend_1","overlord_legend_2","overlord_legend_3"}
        --///Raids\\\---
        elseif level == "Storm Hideout" then
            levellist = {"uchiha_level_1","uchiha_level_2","uchiha_level_3","uchiha_level_4","uchiha_level_5"} 
        elseif level == "West City" then
            levellist = {"west_city_raid"}
        elseif level == "Infinity Train" then
            levellist = {"demonslayer_raid_1"}
        elseif level == "Shiganshinu District - Raid" then
            levellist = {"aot_raid_1"}
        elseif level == "Hiddel Sand Village - Raid" then
            levellist = {"naruto_raid_1"}
        elseif level == "Freezo's Invasion" then
            levellist = {"west_city_frieza_level_1","west_city_frieza_level_2","west_city_frieza_level_3","west_city_frieza_level_4","west_city_frieza_level_5"}
        elseif level == "Entertainment District" then
            levellist = {"entertainment_district_level_1","entertainment_district_level_2","entertainment_district_level_3","entertainment_district_level_4","entertainment_district_level_5"}
        elseif level == "Hero City (Hero Slayer)" then
            levellist = {"mha_stain"}
        elseif level == "Marine's Ford (Buddha)" then
            levellist = {"marineford_sengoku"}
        --///Portals\\\---
        elseif level == "Alien Portals" then
            levellist = {"portal_boros_g"}
        elseif level == "Demon Portals" then
            levellist = {"april_portal_item"}
        elseif level == "Zeldris Portals" then
            levellist = {"portal_zeldris"}    
        elseif level == "Dressrosa Portals" then
            levellist = {"portal_item__dressrosa"}
        elseif level == "The Eclipse" then
            levellist = {"portal_item__eclipse"}
        elseif level == "Summer Events" then
            levellist = {"portal_summer"}
        ---///Dungeon\\\---    updatefix
        elseif level == "Cursed Womb" then
            levellist = {"jjk_finger"}    
        elseif level == "Crused Parade" then
            levellist = {"jjk_raid"}     
        elseif level == "Anniversary Island" then
            levellist = {"namek_anniversary"}  
            --///Secret Portals\\\---   
        elseif level == "Dressrosa Secret Portals" then
            levellist = {"portal_item__doflamingo"}
        elseif level == "The Eclipse Secret" then
            levellist = {"portal_item__femto"}
        elseif level == "Summer Secret" then
            levellist = {"portal_poseidon"}
        end
        for i = 1, #levellist do
            selectlevel:AddOption(levellist[i])
        end
    end
    --fixmap
    local selectdiff = SelectWorld:Cheat("Dropdown", "🔫 Difficulty",function(value)
        print(value, " Selected")
        Settings.Difficulty = value
        saveSettings()
    end, {
        options = {}, default = Settings.Difficulty
    })
    getgenv().updatedifficulty = function()
        selectdiff:ClearDrop(); level = Settings.SelectedLevel; cata = Settings.WorldCategory; local diff;
        if level == "namek_infinite" or level == "aot_infinite" or level == "demonslayer_infinite" 
        or level == "naruto_infinite" or level == "marineford_infinite" or level == "tokyoghoul_infinite" or level == "hueco_infinite" 
        or level == "hxhant_infinite" or level == "magnolia_infinite" or level == "jjk_infinite" or level == "clover_infinite" 
        or level == "jojo_infinite" or level == "opm_infinite" or level == "7ds_infinite" or level == "mha_infinite" 
        or level == "sao_infinite" or level == "berserk_infinite" or level == "overlord_infinite" 
        or level == "dressrosa_infinite" or cata == "Legend Stages" or cata == "Raid Worlds"  then
            diff = {"Hard"}
        elseif cata == "Portals" or cata == "Dungeon" or cata == "Secret Portals"  then
            diff = {"Default"}
        else
            diff = {"Normal", "Hard"}
        end
        for i = 1, #diff do
            selectdiff:AddOption(diff[i])
        end
    end


    Table_Tier2 = {}
    for i = 0,15 do
        table.insert(Table_Tier2,i)
    end
    Settings.SelectedTier1 = Settings.SelectedTier1 or 0
    local selectlevel = SelectWorld:Cheat("Dropdown", "🎚️ Tier more than >",function(value)
        warn("Change to : "..value)
        Settings.SelectedTier1 = value
        saveSettings()
    end, {options = Table_Tier2, default = Settings.SelectedTier1})

    Table_Tier3 = {}
    for i = 0,15 do
        table.insert(Table_Tier3,i)
    end
    Settings.SelectedTier2 = Settings.SelectedTier2 or 15
    local selectlevel = SelectWorld:Cheat("Dropdown", "🎚️ Tier less <",function(value)
        warn("Change to : "..value)
        Settings.SelectedTier2 = value
        saveSettings()
    end, {options = Table_Tier3, default = Settings.SelectedTier2})


    Settings.SelectedChallenge = Settings.SelectedChallenge or "double_cost"
    local selectlevel = SelectWorld:Cheat("Dropdown", "🎚️ Din't use Challenge",function(value)
        Settings.SelectedChallenge = value
        saveSettings()
    end, { options = {"double_cost","short_range","fast_enemies","regen_enemies", "tank_enemies","shield_enemies","triple_cost","hyper_regen_enemies","hyper_shield_enemies",
    "godspeed_enemies","flying_enemies","mini_range"}, default =Settings.SelectedChallenge})

    Settings.SelectedChallenge2 = Settings.SelectedChallenge2 or "double_cost"
    local selectlevel = SelectWorld:Cheat("Dropdown", "🎚️ Din't use Challenge ",function(value)
        warn("Change to : "..value)
        Settings.SelectedChallenge2 = value
        saveSettings()
    end, { options = {"double_cost","short_range","fast_enemies","regen_enemies", "tank_enemies","shield_enemies","triple_cost","hyper_regen_enemies","hyper_shield_enemies",
    "godspeed_enemies","flying_enemies","mini_range"}, default =Settings.SelectedChallenge2})

    Settings.SelectedChallenge3 = Settings.SelectedChallenge3 or "double_cost"
    local selectlevel = SelectWorld:Cheat("Dropdown", "🎚️ Din't use Challenge ",function(value)
        warn("Change to : "..value)
        Settings.SelectedChallenge3 = value
        saveSettings()
    end, { options = {"double_cost","short_range","fast_enemies","regen_enemies", "tank_enemies","shield_enemies","triple_cost","hyper_regen_enemies","hyper_shield_enemies",
    "godspeed_enemies","flying_enemies","mini_range"}, default =Settings.SelectedChallenge3})

    Settings.SelectedPortalsName1 = Settings.SelectedPortalsName1 or "None"
    local selectlevel = SelectWorld:Cheat("Dropdown", "🌀 Din't Use Map ",function(value)
        warn("Change to : "..value)
        Settings.SelectedPortalsName1 = value
        saveSettings()
    end, { options = {"None","Planet Namak (Summer)","Shiganshinu District (Summer)","Ant Kingdom (Summer)","Cursed Academy (Summer)","Puppet Island (Summer)","Alien Spaceship (Underwater)","Fabled Kingdom (Summer)"}, default =Settings.SelectedPortalsName1})

    Settings.SelectedPortalsName2 = Settings.SelectedPortalsName2 or "None"
    local selectlevel = SelectWorld:Cheat("Dropdown", "🌀 Din't Use Map ",function(value)
        warn("Change to : "..value)
        Settings.SelectedPortalsName2 = value
        saveSettings()
    end, { options = {"None","Planet Namak (Summer)","Shiganshinu District (Summer)","Ant Kingdom (Summer)","Cursed Academy (Summer)","Puppet Island (Summer)","Alien Spaceship (Underwater)","Fabled Kingdom (Summer)"}, default =Settings.SelectedPortalsName2})

    Settings.SelectedPortalsName3 = Settings.SelectedPortalsName3 or "None"
    local selectlevel = SelectWorld:Cheat("Dropdown", "🌀 Din't Use Map ",function(value)
        warn("Change to : "..value)
        Settings.SelectedPortalsName3 = value
        saveSettings()
    end, { options = {"None","Planet Namak (Summer)","Shiganshinu District (Summer)","Ant Kingdom (Summer)","Cursed Academy (Summer)","Puppet Island (Summer)","Alien Spaceship (Underwater)","Fabled Kingdom (Summer)"}, default =Settings.SelectedPortalsName3})


    SelectWorld:Cheat("Checkbox","👬 Friends Only", function(bool)
        print(bool)
        Settings.isFriendOnly = bool
        saveSettings()
    end,{enabled = Settings.isFriendOnly})
end

----------------------------------------------
---------------- AutoFarm Config -------------
----------------------------------------------
    AutoFarmConfig:Cheat("Checkbox","🏃 Auto Pick Portal [Replay] ", function(bool)
        print(bool)
        Settings.AutoPickPortal = bool
        saveSettings()
    end,{enabled = Settings.AutoPickPortal})


    UnitAOE:Cheat("Checkbox","Enable INF Range Unit [ZicZac] ", function(bool)
        print(bool)
        Settings.blackhole = bool
        saveSettings()
    end,{enabled = Settings.blackhole})


---------------------------------------------
-------------- LOWW CPU Config --------------
---------------------------------------------
local function LowCPUModeT()

    --New Fix isrbxactive
    local IS_ROBLOX_ACTIVE = false
    local UIS = game:GetService("UserInputService")
    UIS.WindowFocused:Connect(function()
        IS_ROBLOX_ACTIVE = true
    end)
    UIS.WindowFocusReleased:Connect(function()
        IS_ROBLOX_ACTIVE = false
    end)
    function isrbxactive()
        return IS_ROBLOX_ACTIVE
    end
    getgenv().isrbxactive = newcclosure(isrbxactive)
    --End fix isrbxactive

    --Start_FPS_Cap
    FPS_CAP = {}
    for i = 1,60 do
        table.insert(FPS_CAP,i)
    end
    Settings.FPSCAPNum = Settings.FPSCAPNum or 15
    LowCPU2:Cheat("Dropdown", "🎚️ Select FPS Cap ",function(value)
        warn("Change to : "..value)
        Settings.FPSCAPNum = value
        saveSettings()
    end, {options = FPS_CAP, default = Settings.FPSCAPNum})


    LowCPU2:Cheat("Checkbox","Enable Low CPU Mode ", function(bool)
        print(bool)
        Settings.lowCpuMode = bool
        saveSettings()
    end,{enabled = Settings.lowCpuMode})

    task.spawn(function()
        while task.wait() do
            if IS_ROBLOX_ACTIVE ~= true and Settings.lowCpuMode then
                setfpscap(tonumber(Settings.FPSCAPNum))
                game:GetService("RunService"):Set3dRenderingEnabled(false)
                isrbxactive(true)
            else
                setfpscap(240)
                game:GetService("RunService"):Set3dRenderingEnabled(true)
                isrbxactive(false)
            end
        end
    end)


    --New Fix isrbxactive
    local IS_ROBLOX_ACTIVE2 = false
    local UIS = game:GetService("UserInputService")
    UIS.WindowFocused:Connect(function()
        IS_ROBLOX_ACTIVE2 = true
    end)
    UIS.WindowFocusReleased:Connect(function()
        IS_ROBLOX_ACTIVE2 = false
    end)
    function isrbxactive2()
        return IS_ROBLOX_ACTIVE2
    end
    getgenv().isrbxactive2 = newcclosure(isrbxactive2)
    --End fix isrbxactive

    LowCPU2:Cheat("Checkbox","Enable FPS Cap ", function(bool)
        print(bool)
        Settings.lowCpuMode2 = bool
        saveSettings()
    end,{enabled = Settings.lowCpuMode2})

    task.spawn(function()
        while task.wait() do
            if Settings.lowCpuMode2 then
                setfpscap(tonumber(Settings.FPSCAPNum))
                isrbxactive2(true)
            --else
               -- setfpscap(240)
                --isrbxactive2(true)
            end
        end
    end)
    --End_FPS_Cap

    LowCPU2:Cheat("Checkbox","Enable Boost FPS Mode ", function(bool)
        print(bool)
        Settings.fpsboost = bool
        saveSettings()
        FPSBOOST()
    end,{enabled = Settings.fpsboost })

    LowCPU2:Cheat("Button","Activate Boost FPS Mode ", function()
        FPSBOOST()
    end)


    end

---------------------------------------------
-------------- LAGGY Config -----------------
---------------------------------------------

local function LAGGYconfig()
    LG1:Cheat("Label"," Is a BETA Version // Enjoy ")

    --test New Lag
LG1:Cheat("Checkbox","Enable Laggy ", function(bool)
	print(bool)
	Settings.EnableLag = bool
	saveSettings()
end,{enabled = Settings.EnableLag})

task.spawn(function()
	while task.wait() do
        local l_wave = game:GetService("Workspace"):WaitForChild("_wave_num")
		if Settings.EnableLag and tonumber(Settings.LagatWave) <= l_wave.Value then
    delaylag = tonumber(Settings.delag or 1.5)
    while wait(tonumber(Settings.delag or 1.5)) do --// don't change it's the best
    game:GetService("NetworkClient"):SetOutgoingKBPSLimit(math.huge * math.huge)
    local function getmaxvalue(val)
       --local mainvalueifonetable = 499999
       local mainvalueifonetable = tonumber(Settings.lagimpact or 499999)
       if type(val) ~= "number" then
           return nil
       end
       local calculateperfectval = (mainvalueifonetable/(val+2))
       return calculateperfectval
    end

    --local function bomb(tableincrease, tries)
function bomb(tableincrease, tries)
    local maintable = {}
    local spammedtable = {}

    table.insert(spammedtable, {})
    z = spammedtable[1]

    tableincrease = tonumber(Settings.max or 22)
    for i = 1, tableincrease do
        local tableins = {}
        table.insert(z, tableins)
        z = tableins
    end

    local calculatemax = getmaxvalue(tableincrease)
    local maximum

    if calculatemax then
         maximum = calculatemax
         else
         maximum = 999999
    end

    for i = 1, maximum do
         table.insert(maintable, spammedtable)
    end

    --tries = tonumber(Settings.mix or 1.5)
    for i = 1, tries do
         game.RobloxReplicatedStorage.SetPlayerBlockList:FireServer(maintable)
    end
end

    tableincrease = tonumber(Settings.max or 22)
    --tries = tonumber(Settings.mix or 1.5)

    if Settings.EnableLag then
        --bomb(tableincrease, tonumber(Settings.mix))
        bomb(tonumber(Settings.max), tonumber(Settings.mix))
    elseif not Settings.EnableLag then
        bomb(tableincrease, 0)
    end
    --bomb(tableincrease, tries)
    --repeat task.wait() until not Settings.EnableLag
            end
        end
    end
end)

    LG1:Cheat("Textbox", " Lag At Wave ", function(Value)
        Value = tonumber(Value)
        Settings.LagatWave = Value
        saveSettings()
    end, {placeholder = Settings.LagatWave}) 


    LG1:Cheat("Slider", "LAG IMPACT(S) ", function(Value)
        print("LAG Lv.:", Value)
        Settings.lagimpact = tonumber(Value)
        saveSettings()
    end, {min = 0, max = 499999, suffix = "", default = Settings.lagimpact })
    --LG1:Cheat("Label","LAG IMPACT(S) : "..tonumber(Settings.lagimpact)) 


    LG1:Cheat("Slider", "LAG Threads ", function(Value)
        print("LAG Lv.:", Value)
        Settings.max = tonumber(Value)
        saveSettings()
    end, {min = 0, max = 250, suffix = "", default = Settings.max })
    --LG1:Cheat("Label","LAG Threads : "..tonumber(Settings.max)) 


    LG1:Cheat("Slider", "LAG Lv. ", function(Value)
        print("LAG Lv.:", Value)
        Settings.mix = tonumber(Value)
        saveSettings()
    end, {min = 1, max = 7, suffix = "", default = Settings.mix })
    --LG1:Cheat("Label","LAG Lv. : "..tonumber(Settings.mix)) 


    LG1:Cheat("Slider", "Delay ", function(Value)
        print("Delay.:", Value)
        Settings.delag = tonumber(Value)
        saveSettings()
    end, {min = 0.1, max = 10, suffix = "", default = Settings.delag })
    --LG1:Cheat("Label","LAG Delay :  "..tonumber(Settings.delag)) 

    LG1:Cheat("Label"," How to LAG Setting")
    LG1:Cheat("Label"," Def-Setting")
    LG1:Cheat("Label"," IMPACT(S) = 499k, Threads = 22")
    LG1:Cheat("Label"," LAG Lv. = 1, Delay = 1")
    LG1:Cheat("Label"," Fast-LAG")
    LG1:Cheat("Label"," IMPACT(S) = 499k, Threads = 22")
    LG1:Cheat("Label"," LAG Lv. = 1, Delay = 0.2")


end


 
----------------------------------------------
-------------- Discord Webhook ---------------
----------------------------------------------
function Webhooksec()
    WebhookSec:Cheat("Textbox", "Webhook Url", function(Value)
        Settings.WebhookUrl = Value
        saveSettings()
    end, {placeholder = Settings.WebhookUrl})

    WebhookSec:Cheat("Textbox", "Baby Webhook Url", function(Value)
        Settings.BabyWebhookUrl = Value
        saveSettings()
    end, {placeholder = Settings.BabyWebhookUrl})

    WebhookSec:Cheat("Textbox", "Snipe Webhook Url", function(Value)
        Settings.SnipeWebhookUrl = Value
        saveSettings()
    end, {placeholder = Settings.SnipeWebhookUrl})

    WebhookSec:Cheat("Checkbox","Enable Webhook", function(bool)
        Settings.WebhookEnabled = bool
        saveSettings()
    end,{enabled = Settings.WebhookEnabled})

    WebhookSec:Cheat("Checkbox","Enable Baby Webhook [BTP,Castle,Tour]", function(bool)
        Settings.BabyWebhookEnabled = bool
        saveSettings()
    end,{enabled = Settings.BabyWebhookEnabled})

    WebhookSec:Cheat("Checkbox","Enable Snipe Webhook [Banner & Shop]", function(bool)
        Settings.snipeWebhookEnabled = bool
        saveSettings()
    end,{enabled = Settings.snipeWebhookEnabled})

    WebhookSec:Cheat("Button", "Test Webhook", function()
        print(Settings.WebhookUrl)
        webhook()
    end)
end

function Webhooksec2()

    WebhookSec:Cheat("Button", "Test Baby&Shop Webhook", function()
        print(Settings.WebhookUrl)
        BabyWebhook()
        SnipeShopNew()
    end)
end




function autoupgradefunc()
    local success, err = pcall(function() --///
        repeat task.wait() until game:GetService("Workspace"):WaitForChild("_UNITS")
        for i, v in ipairs(game:GetService("Workspace")["_UNITS"]:GetChildren()) do
           if v:FindFirstChild("_stats") then
                if tostring(v["_stats"].player.Value) == game.Players.LocalPlayer.Name and v["_stats"].xp.Value >= 0 then
                    game:GetService("ReplicatedStorage").endpoints.client_to_server.upgrade_unit_ingame:InvokeServer(v)
                end
            end
        end
    end)
    if err then
        warn("//////////////////////////////////////////////////")
        warn("//////////////////////////////////////////////////")
        getgenv().autoupgradeerr = true
        error(err)
    end
end


    -- Start of Get Current Wave Number [Added by HOLYSHz]
function GetWaveNumber()
    return game:GetService("Workspace")["_wave_num"].Value
end
    -- End of Get Current Wave Number

-----------------------------------------------------
--------------------FPS BOOST-----------------------
-----------------------------------------------------

function FPSBOOST()
    _G.Settings = {
        Players = {
            ["Ignore Me"] = true, -- Ignore your Character
            ["Ignore Others"] = true -- Ignore other Characters
        },
        Meshes = {
            Destroy = false, -- Destroy Meshes
            LowDetail = true -- Low detail meshes (NOT SURE IT DOES ANYTHING)
        },
        Images = {
            Invisible = false, -- Invisible Images
            LowDetail = false, -- Low detail images (NOT SURE IT DOES ANYTHING)
            Destroy = false, -- Destroy Images
        },
        ["No Particles"] = true, -- Disables all ParticleEmitter, Trail, Smoke, Fire and Sparkles
        ["No Camera Effects"] = true, -- Disables all PostEffect's (Camera/Lighting Effects)
        ["No Explosions"] = true, -- Makes Explosion's invisible
        ["No Clothes"] = true, -- Removes Clothing from the game
        ["Low Water Graphics"] = true, -- Removes Water Quality
        ["No Shadows"] = true, -- Remove Shadows
        ["Low Rendering"] = true, -- Lower Rendering
        ["Low Quality Parts"] = true -- Lower quality parts
    }

    if not _G.Ignore then
        _G.Ignore = {} -- Add Instances to this table to ignore them (e.g. _G.Ignore = {workspace.Map, workspace.Map2})
    end
    if not _G.WaitPerAmount then
        _G.WaitPerAmount = 500 -- Set Higher or Lower depending on your computer's performance
    end
    if _G.SendNotifications == nil then
        _G.SendNotifications = false -- Set to false if you don't want notifications
    end
    if _G.ConsoleLogs == nil then
        _G.ConsoleLogs = false -- Set to true if you want console logs (mainly for debugging)
    end



    if not game:IsLoaded() then
        repeat
            task.wait()
        until game:IsLoaded()
    end
    if not _G.Settings then
        _G.Settings = {
            Players = {
                ["Ignore Me"] = true,
                ["Ignore Others"] = true,
                ["Ignore Tools"] = true
            },
            Meshes = {
                NoMesh = false,
                NoTexture = true,
                Destroy = false
            },
            Images = {
                Invisible = false,
                Destroy = false
            },
            Explosions = {
                Smaller = true,
                Invisible = false, -- Not recommended for PVP games
                Destroy = false -- Not recommended for PVP games
            },
            Particles = {
                Invisible = true,
                Destroy = false
            },
            TextLabels = {
                LowerQuality = true,
                Invisible = false,
                Destroy = false
            },
            MeshParts = {
                LowerQuality = true,
                Invisible = false,
                NoTexture = false,
                NoMesh = false,
                Destroy = false
            },
            Other = {
                ["FPS Cap"] = true, -- Set this true to uncap FPS
                ["No Camera Effects"] = true,
                ["No Clothes"] = true,
                ["Low Water Graphics"] = true,
                ["No Shadows"] = true,
                ["Low Rendering"] = true,
                ["Low Quality Parts"] = true,
                ["Low Quality Models"] = true,
                ["Reset Materials"] = true,
                ["Lower Quality MeshParts"] = true
            }
        }
    end
    local Players, Lighting, StarterGui, MaterialService = game:GetService("Players"), game:GetService("Lighting"), game:GetService("StarterGui"), game:GetService("MaterialService")
    local ME, CanBeEnabled = Players.LocalPlayer, {"ParticleEmitter", "Trail", "Smoke", "Fire", "Sparkles"}
    local function PartOfCharacter(Instance)
        for i, v in pairs(Players:GetPlayers()) do
            if v ~= ME and v.Character and Instance:IsDescendantOf(v.Character) then
                return true
            end
        end
        return false
    end
    local function DescendantOfIgnore(Instance)
        for i, v in pairs(_G.Ignore) do
            if Instance:IsDescendantOf(v) then
                return true
            end
        end
        return false
    end
    local function CheckIfBad(Instance)
        if not Instance:IsDescendantOf(Players) and (_G.Settings.Players["Ignore Others"] and not PartOfCharacter(Instance) or not _G.Settings.Players["Ignore Others"]) and (_G.Settings.Players["Ignore Me"] and ME.Character and not Instance:IsDescendantOf(ME.Character) or not _G.Settings.Players["Ignore Me"]) and (_G.Settings.Players["Ignore Tools"] and not Instance:IsA("BackpackItem") and not Instance:FindFirstAncestorWhichIsA("BackpackItem") or not _G.Settings.Players["Ignore Tools"])--[[not PartOfCharacter(Instance)]] and (_G.Ignore and not table.find(_G.Ignore, Instance) and not DescendantOfIgnore(Instance) or (not _G.Ignore or type(_G.Ignore) ~= "table" or #_G.Ignore <= 0)) then
            if Instance:IsA("DataModelMesh") then
                if _G.Settings.Meshes.NoMesh and Instance:IsA("SpecialMesh") then
                    Instance.MeshId = ""
                end
                if _G.Settings.Meshes.NoTexture and Instance:IsA("SpecialMesh") then
                    Instance.TextureId = ""
                end
                if _G.Settings.Meshes.Destroy or _G.Settings["No Meshes"] then
                    Instance:Destroy()
                end
            elseif Instance:IsA("FaceInstance") then
                if _G.Settings.Images.Invisible then
                    Instance.Transparency = 1
                    Instance.Shiny = 1
                end
                if _G.Settings.Images.LowDetail then
                    Instance.Shiny = 1
                end
                if _G.Settings.Images.Destroy then
                    Instance:Destroy()
                end
            elseif Instance:IsA("ShirtGraphic") then
                if _G.Settings.Images.Invisible then
                    Instance.Graphic = ""
                end
                if _G.Settings.Images.Destroy then
                    Instance:Destroy()
                end
            elseif table.find(CanBeEnabled, Instance.ClassName) then
                if _G.Settings["Invisible Particles"] or _G.Settings["No Particles"] or (_G.Settings.Other and _G.Settings.Other["Invisible Particles"]) or (_G.Settings.Particles and _G.Settings.Particles.Invisible) then
                    Instance.Enabled = false
                end
                if (_G.Settings.Other and _G.Settings.Other["No Particles"]) or (_G.Settings.Particles and _G.Settings.Particles.Destroy) then
                    Instance:Destroy()
                end
            elseif Instance:IsA("PostEffect") and (_G.Settings["No Camera Effects"] or (_G.Settings.Other and _G.Settings.Other["No Camera Effects"])) then
                Instance.Enabled = false
            elseif Instance:IsA("Explosion") then
                if _G.Settings["Smaller Explosions"] or (_G.Settings.Other and _G.Settings.Other["Smaller Explosions"]) or (_G.Settings.Explosions and _G.Settings.Explosions.Smaller) then
                    Instance.BlastPressure = 1
                    Instance.BlastRadius = 1
                end
                if _G.Settings["Invisible Explosions"] or (_G.Settings.Other and _G.Settings.Other["Invisible Explosions"]) or (_G.Settings.Explosions and _G.Settings.Explosions.Invisible) then
                    Instance.BlastPressure = 1
                    Instance.BlastRadius = 1
                    Instance.Visible = false
                end
                if _G.Settings["No Explosions"] or (_G.Settings.Other and _G.Settings.Other["No Explosions"]) or (_G.Settings.Explosions and _G.Settings.Explosions.Destroy) then
                    Instance:Destroy()
                end
            elseif Instance:IsA("Clothing") or Instance:IsA("SurfaceAppearance") or Instance:IsA("BaseWrap") then
                if _G.Settings["No Clothes"] or (_G.Settings.Other and _G.Settings.Other["No Clothes"]) then
                    Instance:Destroy()
                end
            elseif Instance:IsA("BasePart") and not Instance:IsA("MeshPart") then
                if _G.Settings["Low Quality Parts"] or (_G.Settings.Other and _G.Settings.Other["Low Quality Parts"]) then
                    Instance.Material = Enum.Material.Plastic
                    Instance.Reflectance = 0
                end
            elseif Instance:IsA("TextLabel") and Instance:IsDescendantOf(workspace) then
                if _G.Settings["Lower Quality TextLabels"] or (_G.Settings.Other and _G.Settings.Other["Lower Quality TextLabels"]) or (_G.Settings.TextLabels and _G.Settings.TextLabels.LowerQuality) then
                    Instance.Font = Enum.Font.SourceSans
                    Instance.TextScaled = false
                    Instance.RichText = false
                    Instance.TextSize = 14
                end
                if _G.Settings["Invisible TextLabels"] or (_G.Settings.Other and _G.Settings.Other["Invisible TextLabels"]) or (_G.Settings.TextLabels and _G.Settings.TextLabels.Invisible) then
                    Instance.Visible = false
                end
                if _G.Settings["No TextLabels"] or (_G.Settings.Other and _G.Settings.Other["No TextLabels"]) or (_G.Settings.TextLabels and _G.Settings.TextLabels.Destroy) then
                    Instance:Destroy()
                end
            elseif Instance:IsA("Model") then
                if _G.Settings["Low Quality Models"] or (_G.Settings.Other and _G.Settings.Other["Low Quality Models"]) then
                    Instance.LevelOfDetail = 1
                end
            elseif Instance:IsA("MeshPart") then
                if _G.Settings["Low Quality MeshParts"] or (_G.Settings.Other and _G.Settings.Other["Low Quality MeshParts"]) or (_G.Settings.MeshParts and _G.Settings.MeshParts.LowerQuality) then
                    Instance.RenderFidelity = 2
                    Instance.Reflectance = 0
                    Instance.Material = Enum.Material.Plastic
                end
                if _G.Settings["Invisible MeshParts"] or (_G.Settings.Other and _G.Settings.Other["Invisible MeshParts"]) or (_G.Settings.MeshParts and _G.Settings.MeshParts.Invisible) then
                    Instance.Transparency = 1
                    Instance.RenderFidelity = 2
                    Instance.Reflectance = 0
                    Instance.Material = Enum.Material.Plastic
                end
                if _G.Settings.MeshParts and _G.Settings.MeshParts.NoTexture then
                    Instance.TextureID = ""
                end
                if _G.Settings.MeshParts and _G.Settings.MeshParts.NoMesh then
                    Instance.MeshId = ""
                end
                if _G.Settings["No MeshParts"] or (_G.Settings.Other and _G.Settings.Other["No MeshParts"]) or (_G.Settings.MeshParts and _G.Settings.MeshParts.Destroy) then
                    Instance:Destroy()
                end
            end
        end
    end
    coroutine.wrap(pcall)(function()
        if (_G.Settings["Low Water Graphics"] or (_G.Settings.Other and _G.Settings.Other["Low Water Graphics"])) then
            if not workspace:FindFirstChildOfClass("Terrain") then
                repeat
                    task.wait()
                until workspace:FindFirstChildOfClass("Terrain")
            end
            workspace:FindFirstChildOfClass("Terrain").WaterWaveSize = 0
            workspace:FindFirstChildOfClass("Terrain").WaterWaveSpeed = 0
            workspace:FindFirstChildOfClass("Terrain").WaterReflectance = 0
            workspace:FindFirstChildOfClass("Terrain").WaterTransparency = 0
            if sethiddenproperty then
                sethiddenproperty(workspace:FindFirstChildOfClass("Terrain"), "Decoration", false)
            else
                StarterGui:SetCore("SendNotification", {
                    Title = "FPS Boost V2",
                    Text = "Your exploit does not support sethiddenproperty, please use a different exploit.",
                    Duration = 5,
                    Button1 = "Okay"
                })
                warn("Your exploit does not support sethiddenproperty, please use a different exploit.")
            end
            if _G.ConsoleLogs then
                warn("Low Water Graphics Enabled")
            end
        end
    end)
    coroutine.wrap(pcall)(function()
        if _G.Settings["No Shadows"] or (_G.Settings.Other and _G.Settings.Other["No Shadows"]) then
            Lighting.GlobalShadows = false
            Lighting.FogEnd = 9e9
            Lighting.ShadowSoftness = 0
            if sethiddenproperty then
                sethiddenproperty(Lighting, "Technology", 2)
            else
                StarterGui:SetCore("SendNotification", {
                    Title = "FPS Boost V2",
                    Text = "Your exploit does not support sethiddenproperty, please use a different exploit.",
                    Duration = 5,
                    Button1 = "Okay"
                })
                warn("Your exploit does not support sethiddenproperty, please use a different exploit.")
            end
            if _G.ConsoleLogs then
                warn("No Shadows Enabled")
            end
        end
    end)
    coroutine.wrap(pcall)(function()
        if _G.Settings["Low Rendering"] or (_G.Settings.Other and _G.Settings.Other["Low Rendering"]) then
            settings().Rendering.QualityLevel = 1
            settings().Rendering.MeshPartDetailLevel = Enum.MeshPartDetailLevel.Level04
            if _G.ConsoleLogs then
                warn("Low Rendering Enabled")
            end
        end
    end)
    coroutine.wrap(pcall)(function()
        if _G.Settings["Reset Materials"] or (_G.Settings.Other and _G.Settings.Other["Reset Materials"]) then
            for i, v in pairs(MaterialService:GetChildren()) do
                v:Destroy()
            end
            MaterialService.Use2022Materials = false
            if _G.ConsoleLogs then
                warn("Reset Materials Enabled")
            end
        end
    end)
    coroutine.wrap(pcall)(function()
        if _G.Settings["FPS Cap"] or (_G.Settings.Other and _G.Settings.Other["FPS Cap"]) then
            if setfpscap then
                if type(_G.Settings["FPS Cap"] or (_G.Settings.Other and _G.Settings.Other["FPS Cap"])) == "string" or type(_G.Settings["FPS Cap"] or (_G.Settings.Other and _G.Settings.Other["FPS Cap"])) == "number" then
                    setfpscap(tonumber(_G.Settings["FPS Cap"] or (_G.Settings.Other and _G.Settings.Other["FPS Cap"])))

                    if _G.ConsoleLogs then
                        warn("FPS Capped to " .. tostring(_G.Settings["FPS Cap"] or (_G.Settings.Other and _G.Settings.Other["FPS Cap"])))
                    end
                elseif _G.Settings["FPS Cap"] or (_G.Settings.Other and _G.Settings.Other["FPS Cap"]) == true then
                    setfpscap(1e6)

                    if _G.ConsoleLogs then
                        warn("FPS Uncapped")
                    end
                end
            else
                StarterGui:SetCore("SendNotification", {
                    Title = "FPS Boost V2",
                    Text = "FPS Cap Failed",
                    Duration = math.huge,
                    Button1 = "Okay"
                })
                warn("FPS Cap Failed")
            end
        end
    end)
    game.DescendantAdded:Connect(function(value)
        wait(_G.LoadedWait or 1)
        CheckIfBad(value)
    end)
    local Descendants = game:GetDescendants()
    local StartNumber = _G.WaitPerAmount or 500
    local WaitNumber = _G.WaitPerAmount or 500

    if _G.ConsoleLogs then
        warn("Checking " .. #Descendants .. " Instances...")
    end
    for i, v in pairs(Descendants) do
        CheckIfBad(v)
        if i == WaitNumber then
            task.wait()
            if _G.ConsoleLogs then
                print("Loaded " .. i .. "/" .. #Descendants)
            end
            WaitNumber = WaitNumber + StartNumber
        end
    end
    warn("FPS Booster Loaded!")
end

if Settings.fpsboost then
    FPSBOOST()
end

-----------------------------------------------------
--------------------DELETE MAP-----------------------
-----------------------------------------------------
--delete map Map id
function DelHill()
	if game.Workspace._terrain:FindFirstChild("terrain") then
    	for i,v in pairs(game:GetService("Workspace")["_terrain"].hill:GetChildren()) do
			if v.ClassName == "MeshPart" then v:Remove() end
        	if v.ClassName == "Model" then v:Remove() end
            if v.ClassName == "Part" then v:Remove() end
			if v.ClassName == "Folder" then v:Remove() end
			if v.ClassName == "MeshPart" then v:Remove() end
        end
    end  
end   

if Settings.deletehill then
    DelHill()
end

--deletet terrain
function DelTer()
	if game.Workspace._terrain:FindFirstChild("terrain") then
    	for i,v in pairs(game:GetService("Workspace")["_terrain"].terrain:GetChildren()) do
			if v.ClassName == "MeshPart" then v:Remove() end
        	if v.ClassName == "Model" then v:Remove() end
			if v.ClassName == "Folder" then v:Remove() end
			if v.ClassName == "Part" then v:Remove() end
        end
    end  
end   

function DelMapMain()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

--Nameks
function DelMapnamekmap()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
				if v.Name == "grass" then v:Remove() end
				if v.Name == "trees" then v:Remove() end
				if v.Name == "Folder" then v:Remove() end
				if v.Name == "wires" then v:Remove() end
				if v.Name == "bushes" then v:Remove() end
				if v.Name == "poles" then v:Remove() end
				if v.Name == "flowers" then v:Remove() end
				if v.Name == "gates" then v:Remove() end
				if v.Name == "lamps" then v:Remove() end
				if v.Name == "paper textures" then v:Remove() end
				if v.Name == "notice boards" then v:Remove() end
				if v.Name == "grass things" then v:Remove() end
				if v.Name == "lanterns" then v:Remove() end
				if v.Name == "houses outer (collision)" then v:Remove() end
				if v.Name == "doors" then v:Remove() end
				if v.Name == "_secret" then v:Remove() end
                if v.Name == "cakes" then v:Remove() end
                if v.Name == "balloons" then v:Remove() end
                if v.Name == "obstacles" then v:Remove() end
        end
    end   
end

function DelMapnamekmap2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["namek mushroom model"]:GetChildren()) do
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

function DelMapnamekmap3()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["namek trees model"]:GetChildren()) do
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

function DelMapnamekmap4()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["namek_details"]:GetChildren()) do
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

function DelMapnamekmap5()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["vines_model"]:GetChildren()) do
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

function DelMapnamekmap6()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["namek grass model"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

function DelMapnamekmap7()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].obstacles:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

function DelMapnamekmap8()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].obstacles["new houses"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

function DelMapnamekmap9()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].obstacles.rocks:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

--Titan
function DelMapTitan1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].grass:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

function DelMapTitan2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["houses_new"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

function DelMapTitan3()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].obstacles:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

function DelMapTitan4()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].obstacles.deco:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

function DelMapTitan5()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].obstacles.trees:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

function DelMapTitan6()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["river towers"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapTitan7()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["towers_new"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapTitan8()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["hq_new"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

--Snowy
function DelMapSnowy0()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["snow grass"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

function DelMapSnowy1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].obstacles.deco:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
				if v.ClassName == "Folder" then v:Remove() end
        end
    end  
end

function DelMapSnowy2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
        end
    end  
end


--Aline
function DelMapAlinewires()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].wires:GetChildren()) do
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

function DelMapAlinepaper()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].paper:GetChildren()) do
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

function DelMapAlinetrees()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].trees:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

function DelMapAlinefences()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].fences:GetChildren()) do
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

function DelMapAlinepole()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].pole:GetChildren()) do
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

function DelMapAlinevents()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].vents:GetChildren()) do
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end  
end

function DelMapAlin01()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].fences:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapAlin02()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].vents:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

--Sand
function DelMapSand1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["market deco"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapSand2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].ropes:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapSand3()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["desert_houses"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapSand4()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].innerterrain:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapSand5()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.Name == "KazekageMansion" then v:Remove() end
        end
    end   
end

function DelMapSand6()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.Name == "branches" then v:Remove() end
        end
    end   
end

function DelMapSand7()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.Name == "mansion floor" then v:Remove() end
        end
    end   
end


function DelMapSand8()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].KazekageMansion:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end



--Marine
function DelMapMarine1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].deco:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapMarine2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].grass:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapMarine3()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["ice spikes"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapMarine4()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].icebergs:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapMarine5()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["marine ships"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapMarine6()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["marineford_houses"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapMarine7()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["small ice spikes"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

--Ghoul
function DelMapGhoul1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].Folder.CantPlace:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapGhoul2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["new buildings"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapGhoul3()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.Name == "obstacles" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapGhoul4()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["rain_floors"]:GetChildren()) do
				if v.Name == "obstacles" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapGhoul5()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].rain:GetChildren()) do
				if v.Name == "obstacles" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

--Hollow
function DelMapHollow1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["Bones/dust"]:GetChildren()) do
				if v.Name == "obstacles" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapHollow2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].trees:GetChildren()) do
				if v.Name == "obstacles" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

--Ant
function DelMapAnt()
	if game.Workspace._terrain:FindFirstChild("terrain") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
        	if v.ClassName == "Model" then v:Remove() end
			if v.ClassName == "Folder" then v:Remove() end
        end
    end  
end 

function DelMapAnt1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].obstacles.deco:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapAnt2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].flowers:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapAnt3()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].stumps:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapAnt4()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].cloth:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapAnt5()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].grass:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapAnt6()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].graves:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapAnt7()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].obstacles.deco.Farms:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapAnt8()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].obstacles.deco.Nature:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapAnt9()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].obstacles.deco["Other Small Stuff"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapAnt10()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].obstacles.deco.Walls:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapAnt11()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].obstacles.deco.trees:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapAnt12()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].obstacles.deco["trees-thin"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end
--Magic
function DelMapMagic1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["barrels, benches"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapMagic2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].boats:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapMagic3()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].extras:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapMagic4()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].grass:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapMagic5()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["grass place"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapMagic6()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["light poles"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapMagic7()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].pillars:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapMagic8()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].streamers:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapMagic9()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].tents:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapMagic10()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].trees:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapMagic11()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].wheelbarrows:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapMagic12()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].docks:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapMagic13()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["wooden stacks"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapMagic13()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].dirt:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

--Cursed
function DelMapCursed1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].LanternsGround:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapCursed2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].Nature:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapCursed3()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].Trees:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapCursed4()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].bushes:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapCursed5()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].LanternsSky:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapCursed6()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].deco:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapCursed7()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].dirt:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapCursed8()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].fences:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapCursed9()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].gate:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapCursed10()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].lightning:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapCursed11()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].logs:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapCursed12()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["notice boards and paper"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapCursed13()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].sheds:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapCursed14()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].stairs:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapCursed15()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].wheelbarrows:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapCursed16()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].cables:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

--Clover
function DelMapClover1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["misc deco"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapClover2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].dust:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapClover3()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["notice boards"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapClover4()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].streetlights:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapClover5()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].grass:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapClover6()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].stumps:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapClover7()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].rocks:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapClover8()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].fences:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapClover9()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].trees:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapClover10()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["misc deco"].logs:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapClover11()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["misc deco"].flowers:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapClover12()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["misc deco"].bushes:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapClover13()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["misc deco"].hay:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

--Cape JoJo
function DelMapJoJo1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].SpaceCenter:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapJoJo2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
				if v.Name == "trees" then v:Remove() end
				if v.Name == "grass" then v:Remove() end
				if v.Name == "benches" then v:Remove() end
				if v.Name == "bushes" then v:Remove() end
				if v.Name == "fences" then v:Remove() end
				if v.Name == "misc" then v:Remove() end
				if v.Name == "rockets" then v:Remove() end
				if v.Name == "background buildings" then v:Remove() end
				if v.Name == "paper" then v:Remove() end
				if v.Name == "parking spots" then v:Remove() end
				if v.Name == "barrels" then v:Remove() end
				if v.Name == "sand bags" then v:Remove() end
				if v.Name == "vending_machines" then v:Remove() end
				if v.Name == "_helicopters" then v:Remove() end
				if v.Name == "faketerrain" then v:Remove() end
        end
    end   
end

--Fabled 7ds
function DelMap7ds1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["misc nonocollide obstacles"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMap7ds2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
				if v.Name == "trees" then v:Remove() end
				if v.Name == "grass" then v:Remove() end
				if v.Name == "Flowers" then v:Remove() end
				if v.Name == "wood" then v:Remove() end
				if v.Name == "flag streamers" then v:Remove() end
				if v.Name == "bushes" then v:Remove() end
				if v.Name == "misc noncollide no obstacle" then v:Remove() end
				if v.Name == "fence" then v:Remove() end
				if v.Name == "_secretthing" then v:Remove() end
        end
    end   
end

--Hero mha

function DelMapmha0()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["mha_city_night_rain"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapmha1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["bridge nocollide"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapmha2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
				if v.Name == "trees" then v:Remove() end
				if v.Name == "grass" then v:Remove() end
				if v.Name == "Folder" then v:Remove() end
				if v.Name == "Graffiti" then v:Remove() end
				if v.Name == "street_lights" then v:Remove() end
				if v.Name == "Assets" then v:Remove() end
				if v.Name == "bushes" then v:Remove() end
				if v.Name == "bricks" then v:Remove() end
				if v.Name == "sky bridges" then v:Remove() end
				if v.Name == "clothing" then v:Remove() end
				if v.Name == "more" then v:Remove() end
				if v.Name == "parking_spots" then v:Remove() end
				if v.Name == "trash" then v:Remove() end
				if v.Name == "vending" then v:Remove() end
				if v.Name == "store" then v:Remove() end
        end
    end   
end
--bleach_legend
function DelMapbleachleg1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["sand_bags"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapbleachleg2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
				if v.Name == "trees" then v:Remove() end
				if v.Name == "grass" then v:Remove() end
				if v.Name == "Folder" then v:Remove() end
				if v.Name == "barrels" then v:Remove() end
				if v.Name == "misc" then v:Remove() end
				if v.Name == "benches" then v:Remove() end
				if v.Name == "fences" then v:Remove() end
				if v.Name == "graves" then v:Remove() end
				if v.Name == "parking spots" then v:Remove() end
				if v.Name == "street_lights" then v:Remove() end
				if v.Name == "trees separatetd" then v:Remove() end
				if v.Name == "trucks" then v:Remove() end
        end
    end   
end

--westcity
function DelMapwestcity1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].s:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapwestcity2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
				if v.Name == "deco" then v:Remove() end
        end
    end   
end

--uchiha
function DelMapuchiha1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["bushes and flowers"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapuchiha2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
				if v.Name == "grass" then v:Remove() end
				if v.Name == "trees" then v:Remove() end
				if v.Name == "lanterns" then v:Remove() end
				if v.Name == "logs" then v:Remove() end
        end
    end   
end

--demonslayer_raid_1
function DelMapdemonraid1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["snow grass"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapdemonraid2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
				if v.Name == "grass" then v:Remove() end
				if v.Name == "trees" then v:Remove() end
				if v.Name == "obstacles" then v:Remove() end
				if v.Name == "flowers" then v:Remove() end
        end
    end   
end

--entertain
function DelMapentertain1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["benches and barrels"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapentertain2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
				if v.Name == "grass" then v:Remove() end
				if v.Name == "trees" then v:Remove() end
				if v.Name == "Folder" then v:Remove() end
				if v.Name == "wires" then v:Remove() end
				if v.Name == "bushes" then v:Remove() end
				if v.Name == "poles" then v:Remove() end
				if v.Name == "flowers" then v:Remove() end
				if v.Name == "gates" then v:Remove() end
				if v.Name == "lamps" then v:Remove() end
				if v.Name == "paper textures" then v:Remove() end
				if v.Name == "notice boards" then v:Remove() end
				if v.Name == "grass things" then v:Remove() end
				if v.Name == "lanterns" then v:Remove() end
				if v.Name == "houses outer (collision)" then v:Remove() end
				if v.Name == "doors" then v:Remove() end
				if v.Name == "_secret" then v:Remove() end
        end
    end   
end

--OPnew

function DelMapOPnew()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
				if v.Name == "grass" then v:Remove() end
				if v.Name == "trees" then v:Remove() end
				if v.Name == "Folder" then v:Remove() end
				if v.Name == "wires" then v:Remove() end
				if v.Name == "bushes" then v:Remove() end
				if v.Name == "poles" then v:Remove() end
				if v.Name == "flowers" then v:Remove() end
				if v.Name == "gates" then v:Remove() end
				if v.Name == "lamps" then v:Remove() end
				if v.Name == "paper textures" then v:Remove() end
				if v.Name == "notice boards" then v:Remove() end
				if v.Name == "grass things" then v:Remove() end
				if v.Name == "lanterns" then v:Remove() end
				if v.Name == "houses outer (collision)" then v:Remove() end
				if v.Name == "doors" then v:Remove() end
				if v.Name == "_secret" then v:Remove() end
        end
    end   
end

function DelMapOPnew1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].cloth:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapOPnew2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].hay:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapOPnew3()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].paper:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapOPnew4()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["wood stacks"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapOPnew5()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["tables and tents"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapOPnew6()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].linings:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

--Modako
function DelMapmodako()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
				if v.Name == "grass" then v:Remove() end
				if v.Name == "trees" then v:Remove() end
				if v.Name == "Folder" then v:Remove() end
				if v.Name == "wires" then v:Remove() end
				if v.Name == "bushes" then v:Remove() end
				if v.Name == "poles" then v:Remove() end
				if v.Name == "flowers" then v:Remove() end
				if v.Name == "gates" then v:Remove() end
				if v.Name == "lamps" then v:Remove() end
				if v.Name == "paper textures" then v:Remove() end
				if v.Name == "notice boards" then v:Remove() end
				if v.Name == "grass thing" then v:Remove() end
				if v.Name == "lanterns" then v:Remove() end
				if v.Name == "houses outer (collision)" then v:Remove() end
				if v.Name == "doors" then v:Remove() end
				if v.Name == "_secret" then v:Remove() end
        end
    end   
end

function DelMapmodako1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].debrisouter:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapmodako2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].buildingsouter:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapmodako3()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].fence:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapmodako4()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["fire p"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapmodako5()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].paper:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapmodako6()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["road lines"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapmodako7()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].roadtreethings:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapmodako8()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].telepoles:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapmodako9()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].watertanks:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapmodako10()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].sparks:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

--SAO
function DelMapsao()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
				if v.Name == "grass" then v:Remove() end
				if v.Name == "trees" then v:Remove() end
				if v.Name == "Folder" then v:Remove() end
				if v.Name == "wires" then v:Remove() end
				if v.Name == "bushes" then v:Remove() end
				if v.Name == "poles" then v:Remove() end
				if v.Name == "flowers" then v:Remove() end
				if v.Name == "gates" then v:Remove() end
				if v.Name == "lamps" then v:Remove() end
				if v.Name == "paper textures" then v:Remove() end
				if v.Name == "notice boards" then v:Remove() end
				if v.Name == "grass things" then v:Remove() end
				if v.Name == "lanterns" then v:Remove() end
				if v.Name == "houses outer (collision)" then v:Remove() end
				if v.Name == "doors" then v:Remove() end
				if v.Name == "_secret" then v:Remove() end
        end
    end   
end

function DelMapsao1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].light:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapsao2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].fish:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapsao3()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["water beams"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapsao4()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].fireflies:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapsao5()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].torches:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

--Berserk
function DelMapBerserk()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
				if v.Name == "grass" then v:Remove() end
				if v.Name == "trees" then v:Remove() end
				if v.Name == "Folder" then v:Remove() end
				if v.Name == "wires" then v:Remove() end
				if v.Name == "bushes" then v:Remove() end
				if v.Name == "poles" then v:Remove() end
				if v.Name == "flowers" then v:Remove() end
				if v.Name == "gates" then v:Remove() end
				if v.Name == "lamps" then v:Remove() end
				if v.Name == "paper textures" then v:Remove() end
				if v.Name == "notice boards" then v:Remove() end
				if v.Name == "grass things" then v:Remove() end
				if v.Name == "lanterns" then v:Remove() end
				if v.Name == "houses outer (collision)" then v:Remove() end
				if v.Name == "doors" then v:Remove() end
				if v.Name == "_secret" then v:Remove() end
        end
    end   
end

function DelMapBerserk1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].swords:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapBerserk2()
	if game.Workspace:FindFirstChild("_terrain") then
    	for i,v in pairs(game:GetService("Workspace")["_terrain"].terrain:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

--Eclipse
function DelMapEclipse()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
				if v.Name == "grass" then v:Remove() end
				if v.Name == "trees" then v:Remove() end
				if v.Name == "Folder" then v:Remove() end
				if v.Name == "wires" then v:Remove() end
				if v.Name == "bushes" then v:Remove() end
				if v.Name == "poles" then v:Remove() end
				if v.Name == "flowers" then v:Remove() end
				if v.Name == "gates" then v:Remove() end
				if v.Name == "lamps" then v:Remove() end
				if v.Name == "paper textures" then v:Remove() end
				if v.Name == "notice boards" then v:Remove() end
				if v.Name == "grass things" then v:Remove() end
				if v.Name == "lanterns" then v:Remove() end
				if v.Name == "houses outer (collision)" then v:Remove() end
				if v.Name == "doors" then v:Remove() end
				if v.Name == "_secret" then v:Remove() end
        end
    end   
end

function DelMapEclipse2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].Storm:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapEclipse3()
	if game.Workspace:FindFirstChild("_terrain") then
    	for i,v in pairs(game:GetService("Workspace")["_terrain"].terrain:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

--SUMMER
--SummerCursed
function DelMapSMCursed1()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].LanternsGround:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapSMCursed2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].Nature:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapSMCursed3()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].Trees:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapSMCursed4()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].bushes:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapSMCursed5()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].LanternsSky:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapSMCursed6()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].deco:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapSMCursed7()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].dirt:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapSMCursed8()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].fences:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapSMCursed9()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].gate:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapSMCursed10()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].lightning:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapSMCursed11()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].logs:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapSMCursed12()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["notice boards and paper"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapSMCursed13()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].sheds:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapSMCursed14()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].stairs:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapSMCursed15()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].wheelbarrows:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapSMCursed16()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].cables:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapSMCursed17()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["summer_props"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

--Overlord
function DelMapOverlord1()
	if game.Workspace:FindFirstChild("_map") then
		for i,v in pairs(game:GetService("Workspace")["_map"]:GetChildren()) do
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
		end
	end  
end

function DelMapOverlord2()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"].torches:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end

function DelMapOverlord3()
	if game.Workspace:FindFirstChild("_map") then
    	for i,v in pairs(game:GetService("Workspace")["_map"]["_deathknights"]:GetChildren()) do
				if v.ClassName == "Folder" then v:Remove() end
				if v.ClassName == "MeshPart" then v:Remove() end
				if v.ClassName == "Model" then v:Remove() end
				if v.ClassName == "Part" then v:Remove() end
        end
    end   
end
--fixmap
---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------

coroutine.resume(coroutine.create(function()
    while task.wait(1.5) do
        if game.PlaceId ~= 8304191830 and Settings.deletemap then
            local _wave = game:GetService("Workspace"):WaitForChild("_wave_num")
            repeat task.wait() until game:GetService("Workspace"):WaitForChild("_map")
            if game.Workspace._map:FindFirstChild("namek mushroom model") then
				DelTer() 
				DelMapMain()
                DelMapnamekmap()
                DelMapnamekmap2()
				DelMapnamekmap3()
				DelMapnamekmap4()
				DelMapnamekmap5()
				DelMapnamekmap6()
				DelMapnamekmap7()
				DelMapnamekmap8()
				DelMapnamekmap9()
            elseif game.Workspace._map:FindFirstChild("houses_new") then
                DelTer() 
				DelMapMain()
				DelMapTitan1()
		DelMapTitan2()
		DelMapTitan3()
		DelMapTitan4()
		DelMapTitan5()
		DelMapTitan6()
		DelMapTitan7()
		DelMapTitan8()
            elseif game.Workspace._map:FindFirstChild("Snow Particles") then
                DelTer() 
				DelMapSnowy0()
				DelMapSnowy1()
                DelMapSnowy2()
            elseif game.Workspace._map:FindFirstChild("sand_gate") then  
                DelTer() 
				DelMapSand1()
		DelMapSand2()
		DelMapSand3()
		DelMapSand4()
        DelMapSand5()
        DelMapSand6()
        DelMapSand7()
        DelMapSand8()
            elseif game.Workspace._map:FindFirstChild("icebergs") then
                DelTer() 
				DelMapMain()
				DelMapMarine1()
		DelMapMarine2()
		DelMapMarine3()
		DelMapMarine4()
		DelMapMarine5()
		DelMapMarine6()
		DelMapMarine7()
            elseif game.Workspace._map:FindFirstChild("new buildings") then
                DelTer() 
				DelMapMain()
				DelMapGhoul1()
		DelMapGhoul2()
		DelMapGhoul3()
		DelMapGhoul4()
		DelMapGhoul5()
            elseif game.Workspace._map:FindFirstChild("Bones/dust") then
                DelTer() 
				DelMapMain()
				DelMapHollow1()
                DelMapHollow2()
            elseif game.Workspace._map:FindFirstChild("light poles") then
                DelTer() 
				DelMapMain()
				DelMapMagic1()
		DelMapMagic2()
		DelMapMagic3()
		DelMapMagic4()
		DelMapMagic5()
		DelMapMagic6()
		DelMapMagic7()
		DelMapMagic8()
		DelMapMagic9()
		DelMapMagic10()
		DelMapMagic11()
		DelMapMagic12()
		DelMapMagic13()
            elseif game.Workspace._map:FindFirstChild("pumpkins") then    
                DelTer() 
				DelMapMain() 
            elseif game.Workspace._map:FindFirstChild("sand_bags") then
                DelTer() 
				DelMapMain()
				DelMapbleachleg1()
		DelMapbleachleg2()
            elseif game.Workspace._map:FindFirstChild("vending machines") then
                DelTer() 
				DelMapMain()
            elseif game.Workspace._map:FindFirstChild("SpaceCenter") then
                DelTer() 
				DelMapMain()
				DelMapJoJo1()
		DelMapJoJo2()
            elseif game.Workspace._map:FindFirstChild("secret") then
                DelTer() 
				DelMapMain()
				DelMapAlinewires()
		DelMapAlinepaper()
		DelMapAlinetrees()
		DelMapAlinefences()
		DelMapAlinepole()
		DelMapAlinevents()
            elseif game.Workspace._map:FindFirstChild("s") then
                DelTer() 
				DelMapMain()
				DelMapwestcity1()
		DelMapwestcity2()
            elseif game.Workspace._map:FindFirstChild("bushes and flowers") then
                DelTer() 
				DelMapMain()
				DelMapuchiha1()
		DelMapuchiha2()
            elseif game.Workspace._map:FindFirstChild("snow grass") then
                DelTer() 
				DelMapMain()
				DelMapdemonraid1()
		DelMapdemonraid2()
            elseif game.Workspace._map:FindFirstChild("misc nonocollide obstacles") then
                DelTer() 
				DelMapMain()
				DelMap7ds1()
		DelMap7ds2()
            elseif game.Workspace._map:FindFirstChild("bridge nocollide") then
                DelTer() 
				DelMapMain()
                DelMapmha0()
				DelMapmha1()
		DelMapmha2()
            elseif game.Workspace._map:FindFirstChild("benches and barrels") then
                DelTer() 
				DelMapMain()
				DelMapentertain1()
		DelMapentertain2()
        elseif game.Workspace._map:FindFirstChild("Ant Nest") then
                DelTer() 
                DelMapAnt()
				DelMapAnt1()
		DelMapAnt2()
		DelMapAnt3()
		DelMapAnt4()
		DelMapAnt5()
		DelMapAnt6()
		DelMapAnt7()
		DelMapAnt8()
		DelMapAnt9()
		DelMapAnt10()
		DelMapAnt11()
		DelMapAnt12()
    elseif game.Workspace._map:FindFirstChild("linings") then
        DelTer() 
        DelMapMain()
        DelMapOPnew()
        DelMapOPnew1()
        DelMapOPnew2()
        DelMapOPnew3()
        DelMapOPnew4()
        DelMapOPnew5()
        DelMapOPnew6()
    elseif game.Workspace._map:FindFirstChild("buildingsouter") then
        DelTer() 
        DelMapmodako()
        DelMapmodako1()
        DelMapmodako2()
        DelMapmodako3()
        DelMapmodako4()
        DelMapmodako5()
        DelMapmodako6()
        DelMapmodako7()
        DelMapmodako8()
        DelMapmodako9()
        DelMapmodako10()
    elseif game.Workspace._map:FindFirstChild("water beams") then
        DelTer() 
		DelMapMain()
        DelMapsao()
		DelMapsao1()
		DelMapsao2()
		DelMapsao3()
		DelMapsao4()
		DelMapsao5()
    elseif game.Workspace._map:FindFirstChild("swords") then
        DelTer() 
		DelMapMain()
        DelMapBerserk()
		DelMapBerserk1()
		DelMapBerserk2()
    elseif game.Workspace._map:FindFirstChild("Storm") then
        DelTer() 
		DelMapMain()
        DelMapEclipse()
		DelMapEclipse2()
		DelMapEclipse3()
    elseif game.Workspace._map:FindFirstChild("_deathknights") then
        DelTer() 
        DelMapOverlord1()
        DelMapOverlord2()
        DelMapOverlord3()
    elseif game.Workspace._map:FindFirstChild("summer_props") then
        DelTer() 
        DelMapMain()
        DelMapSMCursed1()
        DelMapSMCursed2()
        DelMapSMCursed3()
        DelMapSMCursed4()
        DelMapSMCursed5()
        DelMapSMCursed6()
        DelMapSMCursed7()
        DelMapSMCursed8()
        DelMapSMCursed9()
        DelMapSMCursed10()
        DelMapSMCursed11()
        DelMapSMCursed12()
        DelMapSMCursed13()
        DelMapSMCursed14()
        DelMapSMCursed15()
        DelMapSMCursed16()
        DelMapSMCursed17()
    elseif game.Workspace._map:FindFirstChild("LanternsGround") then
        DelTer() 
		DelMapMain()
		DelMapCursed1()
		DelMapCursed2()
		DelMapCursed3()
		DelMapCursed4()
		DelMapCursed5()
		DelMapCursed6()
		DelMapCursed7()
		DelMapCursed8()
		DelMapCursed9()
		DelMapCursed10()
		DelMapCursed11()
		DelMapCursed12()
		DelMapCursed13()
		DelMapCursed14()
		DelMapCursed15()
		DelMapCursed16()
    elseif game.Workspace._map["misc deco"]:FindFirstChild("bushes") then
        DelTer() 
		DelMapMain()
		DelMapClover1()
		DelMapClover2()
		DelMapClover3()
		DelMapClover4()
		DelMapClover5()
		DelMapClover6()
		DelMapClover7()
		DelMapClover8()
		DelMapClover9()
        DelMapClover10()
        DelMapClover11()
        DelMapClover12()
        DelMapClover13()
            end
        end
    end
end))

--fixmap end

--hide name
function hidename()
task.spawn(function()  -- Hides name for yters (not sure if its Fe)
    while task.wait() do
        pcall(function()
            if game.Players.LocalPlayer.Character.Head:FindFirstChild("_overhead") then
                game.Players.LocalPlayer.Character.Head:FindFirstChild("_overhead"):Destroy()
            end
        end)
    end
end)
end
if Settings.hidenamep then
    hidename()
end



-- Start of Check Connection
function checkInterNet()
    warn("Auto Reconnect Enable")
    warn("Auto Anti-AFK Enable")
    while task.wait(5) do
        local vu = game:GetService("VirtualUser")
        game:GetService("Players").LocalPlayer.Idled:connect(function()
            vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
            wait(0.5)
            vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
            wait(0.5)
            vu:CaptureController()vu:ClickButton2(Vector2.new())
        end)
        game.CoreGui.RobloxPromptGui.promptOverlay.ChildAdded:Connect(function(a)
            if a.Name == 'ErrorPrompt' then
                task.wait(60)
                warn("Trying to Reconnect")
                TPReturner()
                end
            end)
        end
    end
-- End of Check Connection

warn("Arpon Anti-AFK Loaded!!!")
warn("Arpon Hider Name Loaded!!!")
warn("Arpon AA v2 Loaded!!!")
warn("All Loaded !!!")

if game.PlaceId == 8304191830 then
    repeat task.wait(0.5) until Workspace:WaitForChild(game.Players.LocalPlayer.Name)
    checkInterNet()
elseif game.PlaceId ~= 8304191830 then
    repeat task.wait(0.5) until Workspace:WaitForChild("_terrain")
    checkInterNet()
end