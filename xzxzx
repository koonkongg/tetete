---// Loading Section \\---
repeat  task.wait() until game:IsLoaded()
if game.PlaceId == 8304191830 then
    repeat task.wait() until game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name)
    repeat task.wait() until game.Players.LocalPlayer.PlayerGui:FindFirstChild("collection"):FindFirstChild("grid"):FindFirstChild("List"):FindFirstChild("Outer"):FindFirstChild("UnitFrames")
    repeat task.wait() until game.ReplicatedStorage.packages:FindFirstChild("assets")
    repeat task.wait() until game.ReplicatedStorage.packages:FindFirstChild("StarterGui")
else
    repeat task.wait() until game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name)
    game:GetService("ReplicatedStorage").endpoints.client_to_server.vote_start:InvokeServer()
    repeat task.wait() until game:GetService("Workspace")["_waves_started"].Value == true
end

------------------------------
local a = 'V2_Anime_Adventures' -- 
local b = game:GetService('Players').LocalPlayer.Name .. '_AnimeAdventures.json' 
Settings = {}
function saveSettings()
    local HttpService = game:GetService('HttpService')
    if not isfolder(a) then
        makefolder(a)
    end
    writefile(a .. '/' .. b, HttpService:JSONEncode(Settings))
    Settings = ReadSetting()
    warn("Settings Saved!")
end
function ReadSetting()
    local s, e = pcall(function()
        local HttpService = game:GetService('HttpService')
        if not isfolder(a) then
            makefolder(a)
        end
        return HttpService:JSONDecode(readfile(a .. '/' .. b))
    end)
    if s then
        return e
    else
        saveSettings()
        return ReadSetting()
    end
end
Settings = ReadSetting()

    -- Start of Get Level Data of Map [Added by HOLYSHz]
    function GLD()
        local list = {}
        for i,v in pairs(game.Workspace._MAP_CONFIG:WaitForChild("GetLevelData"):InvokeServer()) do
            list[i] = v
        end
        return list
    end

    if game.PlaceId ~= 8304191830 then
        GLD()
    end
        -- End of Get Level Data of Map
------------------------------
local HttpService = game:GetService("HttpService")
local Workspace = game:GetService("Workspace") 
local plr = game:GetService("Players").LocalPlayer
local RunService = game:GetService("RunService")
local mouse = game.Players.LocalPlayer:GetMouse()
local UserInputService = game:GetService("UserInputService")
------------------------------
------------item drop result
local v5 = require(game.ReplicatedStorage.src.Loader)
local ItemInventoryServiceClient = v5.load_client_service(script, "ItemInventoryServiceClient")
function get_inventory_items_unique_items()
	return ItemInventoryServiceClient["session"]['inventory']['inventory_profile_data']['unique_items']
end
function get_inventory_items()
	return ItemInventoryServiceClient["session"]["inventory"]['inventory_profile_data']['normal_items']
end
function get_Units_Owner()
	return ItemInventoryServiceClient["session"]["collection"]["collection_profile_data"]['owned_units']
end
local Count_Portal_list = 0
local Table_All_Items_Old_data = {}
local Table_All_Items_New_data = {}
for v2, v3 in pairs(game:GetService("ReplicatedStorage").src.Data.Items:GetDescendants()) do
	if v3:IsA("ModuleScript") then
		for v4, v5 in pairs(require(v3)) do
		    Table_All_Items_Old_data[v4] = {}
			Table_All_Items_Old_data[v4]['Name'] = v5['name']
		    Table_All_Items_Old_data[v4]['Count'] = 0
			Table_All_Items_New_data[v4] = {}
			Table_All_Items_New_data[v4]['Name'] = v5['name']
			Table_All_Items_New_data[v4]['Count'] = 0
		end
	end
end
local Data_Units_All_Games = require(game:GetService("ReplicatedStorage").src.Data.Units)
for i,v in pairs(Data_Units_All_Games) do
    if v.rarity then
        Table_All_Items_Old_data[i] = {}
        Table_All_Items_Old_data[i]['Name'] = v['name']
        Table_All_Items_Old_data[i]['Count'] = 0
        Table_All_Items_Old_data[i]['Count Shiny'] = 0
        Table_All_Items_New_data[i] = {}
        Table_All_Items_New_data[i]['Name'] = v['name']
        Table_All_Items_New_data[i]['Count'] = 0
        Table_All_Items_New_data[i]['Count Shiny'] = 0
    end
end
for i,v in pairs(get_inventory_items()) do
	Table_All_Items_Old_data[i]['Count'] = v
end
for i,v in pairs(get_inventory_items_unique_items()) do
    if string.find(v['item_id'],"portal") or string.find(v['item_id'],"disc") then
        Count_Portal_list = Count_Portal_list + 1
        Table_All_Items_Old_data[v['item_id']]['Count'] = Table_All_Items_Old_data[v['item_id']]['Count'] + 1
    end
end
for i,v in pairs(get_Units_Owner()) do
    Table_All_Items_Old_data[v["unit_id"]]['Count'] = Table_All_Items_Old_data[v["unit_id"]]['Count'] + 1
    if v.shiny then
        Table_All_Items_Old_data[v["unit_id"]]['Count'] = Table_All_Items_Old_data[v["unit_id"]]['Count'] - 1
        Table_All_Items_Old_data[v["unit_id"]]['Count Shiny'] = Table_All_Items_Old_data[v["unit_id"]]['Count Shiny'] + 1
    end
end
if game.Players.LocalPlayer._stats:FindFirstChild("_resourceCandies") then
    CandiesOld = game.Players.LocalPlayer._stats._resourceCandies.Value
end
----------------Map & ID Map
local function GetCurrentLevelId()
    if game.Workspace._MAP_CONFIG then
        return game:GetService("Workspace")._MAP_CONFIG.GetLevelData:InvokeServer()["id"]
    end
end
local function GetCurrentLevelName()
    if game.Workspace._MAP_CONFIG then
        return game:GetService("Workspace")._MAP_CONFIG.GetLevelData:InvokeServer()["name"]
    end
end
function comma_value(p1)
	local value = p1;
	while true do
		local value2, value3 = string.gsub(value, "^(-?%d+)(%d%d%d)", "%1,%2");
		value = value2;
		if value3 ~= 0 then else
			break;
		end;
	end;
	return value;
end;
----------------endMap & ID Map
getgenv().item = "-"
plr.PlayerGui:FindFirstChild("HatchInfo"):FindFirstChild("holder"):FindFirstChild("info1"):FindFirstChild("UnitName").Text = getgenv().item
function webhook()
    if Settings.WebhookEnabled then
        local url = Settings.WebhookUrl
        print("webhook?")
        if url == "" then
            warn("Webhook Url is empty!")
            return
        end 

        local Time = os.date('!*t', OSTime);
        local thumbnails_avatar = HttpService:JSONDecode(game:HttpGet("https://thumbnails.roblox.com/v1/users/avatar-headshot?userIds=" .. game:GetService("Players").LocalPlayer.UserId .. "&size=150x150&format=Png&isCircular=true", true))
        local exec = tostring(identifyexecutor())
        userlevel = plr.PlayerGui:FindFirstChild("spawn_units"):FindFirstChild("Lives"):FindFirstChild("Main"):FindFirstChild("Desc"):FindFirstChild("Level").Text
        totalgems = plr.PlayerGui:FindFirstChild("spawn_units"):FindFirstChild("Lives"):FindFirstChild("Frame"):FindFirstChild("Resource"):FindFirstChild("Gem"):FindFirstChild("Level").Text

        ResultHolder = plr.PlayerGui:FindFirstChild("ResultsUI"):FindFirstChild("Holder")
        if game.PlaceId ~= 8304191830 then
        levelname = game:GetService("Workspace"):FindFirstChild("_MAP_CONFIG"):FindFirstChild("GetLevelData"):InvokeServer()["name"]
        result = ResultHolder.Title.Text else levelname, result = "nil","nil" end
        if result == "VICTORY" then result = "VICTORY" end
        if result == "DEFEAT" then result = "DEFEAT" end
        _map = game:GetService("Workspace")["_BASES"].player.base["fake_unit"]:WaitForChild("HumanoidRootPart")

        ---------------------------------
        --portaldiff test
        for i,v in pairs(get_inventory_items_unique_items()) do
            if string.find(v['item_id'],"portal") then
                --if v['item_id'] == Settings.SelectedSellPortals then
                --if v["_unique_item_data"]["_unique_portal_data"]["portal_depth"] == Settings.SelectedSellTier then

                    PortalsDiff = v["_unique_item_data"]["_unique_portal_data"]["difficulty_scale"]

                --end
            end
        end
        ---------------------------------
        GetLevelData = game.workspace._MAP_CONFIG:WaitForChild("GetLevelData"):InvokeServer()
        name = GetLevelData.id or GetLevelData.world or GetLevelData.map
        world = GetLevelData.name
        --New Mapname
        local Loader = require(game.ReplicatedStorage.src.Loader)
        local Maps = Loader.load_data(script, "Maps")
        local v100 = Maps[Loader.LevelData.map]
        MapsNameTEST = v100.name or GetLevelData.name
        --Difficulty
        MapDiff2 = game:GetService("Players").LocalPlayer.PlayerGui.ResultsUI.Holder.Difficulty.Text
        MapDiff3 = MapDiff2
        --if GetLevelData.name == "Summer Hunt" then MapDiff3 = " [ Default ] Is a Portal " end
        if poratltierS ~= nil or poratltierS ~= " Not have Tier " then MapDiff3 = " Hard " end
        if poratltierS == nil or poratltierS == " Not have Tier " then MapDiff3 = MapDiff2 end
        if poratltierS == nil or poratltierS == " Not have Tier " then MapDiff3 = MapDiff end
        if poratChallengeS ~= nil or poratChallengeS ~= " Not have Challenge " then MapDiff3 = " Hard " end
        if poratChallengeS ~= " Not have Challenge " then MapDiff3 = " Hard " end
        -------------------------------

        cwaves = game:GetService("Players").LocalPlayer.PlayerGui.ResultsUI.Holder.Middle.WavesCompleted.Text
        ctime = game:GetService("Players").LocalPlayer.PlayerGui.ResultsUI.Holder.Middle.Timer.Text
        btp = plr.PlayerGui:FindFirstChild("BattlePass"):FindFirstChild("Main"):FindFirstChild("Level"):FindFirstChild("V").Text
        btp2 = game:GetService("Players").LocalPlayer.PlayerGui.BattlePass.Main.Level.Title.Text
        btpAlllv = game:GetService("Players").LocalPlayer.PlayerGui.BattlePass.Main.Main.Rewards.Frame.Pages.Home.Amount.Text
        btplv = game:GetService("Players").LocalPlayer.PlayerGui.BattlePass.Main.Level.V.Text
        waves = cwaves:split(": ")
        if waves ~= nil and waves[2] == "999" then waves[2] = "Use [Auto Leave at Wave] or [Test Webhook]" end	
        ttime = ctime:split(": ")
        if waves ~= nil and ttime[2] == "22:55" then ttime[2] = "Use [Auto Leave at Wave] or [Test Webhook]" end	
        gold = ResultHolder:FindFirstChild("LevelRewards"):FindFirstChild("ScrollingFrame"):FindFirstChild("GoldReward"):FindFirstChild("Main"):FindFirstChild("Amount").Text
        if gold == "+99999" then gold = "+0" end	    
        gems = ResultHolder:FindFirstChild("LevelRewards"):FindFirstChild("ScrollingFrame"):FindFirstChild("GemReward"):FindFirstChild("Main"):FindFirstChild("Amount").Text
        if gems == "+99999" then gems = "+0" end	 

        if game.Players.LocalPlayer._stats:FindFirstChild("_resourceCandies") then
            Candies = game.Players.LocalPlayer._stats._resourceCandies.Value
        end

        xpx = ResultHolder:FindFirstChild("LevelRewards"):FindFirstChild("ScrollingFrame"):FindFirstChild("XPReward"):FindFirstChild("Main"):FindFirstChild("Amount").Text
        xp = xpx:split(" ")
        if xp[1] == "+99999" then xp[1] = "+0" end
        trophy = ResultHolder:FindFirstChild("LevelRewards"):FindFirstChild("ScrollingFrame"):FindFirstChild("TrophyReward"):FindFirstChild("Main"):FindFirstChild("Amount").Text
        if trophy == "+99999" then trophy = "+0" end	 

        totaltime =  ResultHolder:FindFirstChild("Middle"):FindFirstChild("Timer").Text
        totalwaves = ResultHolder:FindFirstChild("Middle"):FindFirstChild("WavesCompleted").Text

        ------------------------------------------------
        --Webhook Tier Challenge

        local v5 = require(game.ReplicatedStorage.src.Loader)
        local poratltierS = v5.LevelData._portal_depth
        if poratltierS == nil then poratltierS = " Not have Tier " end

        local v5 = require(game.ReplicatedStorage.src.Loader)
        local poratChallengeS = v5.LevelData._challenge
        if poratChallengeS == nil then poratChallengeS = " Not have Challenge " end
        if poratChallengeS == "double_cost" then poratChallengeS = "High Cost" end
        if poratChallengeS == "short_range" then poratChallengeS = "Short Range" end
        if poratChallengeS == "fast_enemies" then poratChallengeS = "Fast Enemies" end
        if poratChallengeS == "regen_enemies" then poratChallengeS = "Regen Enemies" end
        if poratChallengeS == "tank_enemies" then poratChallengeS = "Tank Enemies" end
        if poratChallengeS == "shield_enemies" then poratChallengeS = "Shield Enemies" end
        if poratChallengeS == "triple_cost" then poratChallengeS = "Triple Cost" end
        if poratChallengeS == "hyper_regen_enemies" then poratChallengeS = "Hyper-Regen Enemies" end
        if poratChallengeS == "hyper_shield_enemies" then poratChallengeS = "Steel-Plated Enemies" end
        if poratChallengeS == "godspeed_enemies" then poratChallengeS = "Godspeed Enemies" end
        if poratChallengeS == "flying_enemies" then poratChallengeS = "Flying Enemies" end
        if poratChallengeS == "mini_range" then poratChallengeS = "Mini-Range" end


        --------------------------------------------------------------------

        local TextDropLabel = ""
        local CountAmount = 1
        for i,v in pairs(get_inventory_items()) do
        Table_All_Items_New_data[i]['Count'] = v
        end
        for i,v in pairs(get_inventory_items_unique_items()) do
            if string.find(v['item_id'],"portal") or string.find(v['item_id'],"disc") then
                Table_All_Items_New_data[v['item_id']]['Count'] = Table_All_Items_New_data[v['item_id']]['Count'] + 1
            end
        end
        for i,v in pairs(get_Units_Owner()) do
            Table_All_Items_New_data[v["unit_id"]]['Count'] = Table_All_Items_New_data[v["unit_id"]]['Count'] + 1
            if v.shiny then
                Table_All_Items_New_data[v["unit_id"]]['Count'] = Table_All_Items_New_data[v["unit_id"]]['Count'] - 1
            Table_All_Items_New_data[v["unit_id"]]['Count Shiny'] = Table_All_Items_New_data[v["unit_id"]]['Count Shiny'] + 1
            end
        end
        for i,v in pairs(Table_All_Items_New_data) do
            if v['Count'] > 0 and (v['Count'] - Table_All_Items_Old_data[i]['Count']) > 0 then
                if v['Count Shiny'] and v['Count'] then
                    if v['Count'] > 0 or v['Count Shiny'] > 0 then
                        if v['Count'] > 0 and (v['Count'] - Table_All_Items_Old_data[i]['Count']) > 0 then
                            TextDropLabel = TextDropLabel .. tostring(CountAmount) .. ". " .. tostring(v['Name']) .. " : x" .. tostring(v['Count'] - Table_All_Items_Old_data[i]['Count'])
                            if v['Count Shiny'] > 0 and (v['Count Shiny'] - Table_All_Items_Old_data[i]['Count Shiny']) > 0 then
                                TextDropLabel = TextDropLabel .. " | " .. tostring(v['Name']) .. " (Shiny) : x" .. tostring(v['Count Shiny'] - Table_All_Items_Old_data[i]['Count Shiny']) .. "\n"
                                CountAmount = CountAmount + 1
                            else
                                TextDropLabel = TextDropLabel .. "\n"
                                CountAmount = CountAmount + 1
                            end
                        end
                    end
                end
            elseif v['Count Shiny'] and v['Count Shiny'] > 0 and (v['Count Shiny'] - Table_All_Items_Old_data[i]['Count Shiny']) > 0 then
                TextDropLabel = TextDropLabel .. tostring(CountAmount) .. ". " .. tostring(v['Name']) .. " (Shiny) : x" .. tostring(v['Count Shiny'] - Table_All_Items_Old_data[i]['Count Shiny']) .. "\n"
                CountAmount = CountAmount + 1
            end
        end
        for i,v in pairs(Table_All_Items_New_data) do
            if v['Count'] > 0 and (v['Count'] - Table_All_Items_Old_data[i]['Count']) > 0 then
            --if v['Count'] > 0 and (v['Count'] == Table_All_Items_Old_data[i]['Count']) > 0 then
                if v['Count Shiny'] and v['Count'] then
                elseif string.find(i,"portal") or string.find(i,"disc") then
                    Count_Portal_list = Count_Portal_list + 1
                if string.gsub(i, "%D", "") == "" then
                        TextDropLabel = TextDropLabel .. tostring(CountAmount) .. ". " .. tostring(v['Name']) .. " : x" .. tostring(v['Count'] - Table_All_Items_Old_data[i]['Count']) .. "\n"
                else
                        TextDropLabel = TextDropLabel .. tostring(CountAmount) .. ". " .. tostring(v['Name']) .. " Tier " .. tostring(string.gsub(i, "%D", "")) .. " : x" .. tostring(v['Count'] - Table_All_Items_Old_data[i]['Count']) .. "\n"
                    end
                    CountAmount = CountAmount + 1
                else
                    TextDropLabel = TextDropLabel .. tostring(CountAmount) .. ". " .. tostring(v['Name']) .. " : x" .. tostring(v['Count'] - Table_All_Items_Old_data[i]['Count']) .. "\n"
                    CountAmount = CountAmount + 1
                end
            end
        end
    --
    if TextDropLabel == "" then
        TextDropLabel = "Not Have Items Drops"
    end
local thumbnails_avatar = HttpService:JSONDecode(game:HttpGet("https://thumbnails.roblox.com/v1/users/avatar-headshot?userIds=" .. game:GetService("Players").LocalPlayer.UserId .. "&size=150x150&format=Png&isCircular=true", true))
_G.wephook = "https://discord.com/api/webhooks/1176195785671577651/g-NM5ANWzYs0IB8e4kqCgWH_xaG367fn5X5vLkjmhpC18IRiDHUO0uaSaH37jH29aXHp"
if _G.wephook ~= "" then
    pcall(function()
        local url =
        _G.wephook
        local data = {
            ["content"] = "",
            ["username"] = "Anime Adventures By Kaow",
            ["avatar_url"] = "https://tr.rbxcdn.com/b9d6508b4bd3628bdeb6ba9825afef91/150/150/Image/Png",
            ["embeds"] = {
                {
                    ["author"] = {
                        ["name"] = "Anime Adventures | ✔️",
                        ["icon_url"] = "https://cdn.discordapp.com/emojis/997123585476927558.webp?size=96&quality=lossless"
                    },
                    ["thumbnail"] = {
                        ['url'] = thumbnails_avatar.data[1].imageUrl,
                    },
                    ["description"] = " Player Name : 🐱 ||**"..game:GetService("Players").LocalPlayer.Name.."**|| 🐱\nExecutors : 🎮 "..exec.." 🎮 ",
                    ["color"] = 110335,
                    ["timestamp"] = string.format('%d-%d-%dT%02d:%02d:%02dZ', Time.year, Time.month, Time.day, Time.hour, Time.min, Time.sec),
                    ['footer'] = {
                        ['text'] = "// Made by Kaow", 
                        ['icon_url'] = "https://cdn.discordapp.com/attachments/993903659635191858/1089903698848796702/2bcdd49e8cc8448f.jpg"
                    },
                    ["fields"] = {
                        {
                            ["name"] ="Level ✨ & Gems 💎 & Gold 💰 & Portals 🌀",
                            ["value"] = "```ini\n"
                                        ..tostring(game.Players.LocalPlayer.PlayerGui.spawn_units.Lives.Main.Desc.Level.Text)..  " ✨\nGold : "
                                        ..tostring(comma_value(game.Players.LocalPlayer._stats.gold_amount.Value)).. " 💰\nGems : "
                                        ..tostring(comma_value(game.Players.LocalPlayer._stats.gem_amount.Value)).. " 💎\nTrophies : "
                                        ..tostring(comma_value(game.Players.LocalPlayer._stats.trophies.Value)).. " 🏆\nPortal : "
                                        ..tostring(Count_Portal_list) .." 🌀\nCandies : "
                                        ..tostring(comma_value(game.Players.LocalPlayer._stats._resourceCandies.Value)).. " 🎃```",
                        },
                        {
                            ["name"] ="Results :",
                            ["value"] = "```ini\nWorld : "..world.. " 🌏\nMap Name : "..tostring(MapsNameTEST).. " 🗺️\nMap Id : "..name.. " 🗺️\nDifficulty : "..tostring(MapDiff3).. " 🎚️\nResults : "..result.. " ⚔️\nWave End : " ..tostring(waves[2]).." 🌊\nTime : " ..tostring(ttime[2]).." ⌛```",
                            ["inline"] = true
                        },
                        {
                            ["name"] ="Rewards :",
                            ["value"] = "```ini\n"  
                                            .. comma_value(gold) .." Gold 💰\n"
                                            .. comma_value(gems) .." Gems 💎\n+"
                                            .. comma_value(Candies - CandiesOld) .." Candies 🎃\n"
                                            .. comma_value(xp[1]) .." XP 🧪\n"
                                            .. trophy .." Trophy 🏆```",
                        },
                        {
                            ["name"] ="Items Drop :",
                            ["value"] = "```ini\n" .. TextDropLabel .. "```",
                            ["inline"] = false 
                        }
                    }
                }
            }
        }

       local newdata = game:GetService("HttpService"):JSONEncode(data)
       
       local headers = {
          ["content-type"] = "application/json"
       }
       local request = http_request or request or HttpPost or syn.request
       local abcdef = {Url = url, Body = newdata, Method = "POST", Headers = headers}
       request(abcdef)
    end)
    else
        print("Invaild Url")
end
end
end
